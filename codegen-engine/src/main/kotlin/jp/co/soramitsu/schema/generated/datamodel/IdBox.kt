// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.codegen.read
import jp.co.soramitsu.schema.codegen.write
import jp.co.soramitsu.schema.generated.datamodel.account.Id
import jp.co.soramitsu.schema.generated.datamodel.asset.DefinitionId
import kotlin.Int
import kotlin.String
import kotlin.Unit

/**
 * IdBox
 *
 * Generated from 'iroha_data_model::IdBox' enum
 */
public abstract class IdBox {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'AccountId' variant
   */
  public class AccountId(
    private val accountId: Id
  ) : IdBox(), ScaleReader<AccountId>, ScaleWriter<AccountId> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): AccountId =
        AccountId(accountId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: AccountId): Unit {
      writer.directWrite(this.discriminant());
      accountId.write(writer, instance.accountId))
    }
  }

  /**
   * 'AssetId' variant
   */
  public class AssetId(
    private val assetId: jp.co.soramitsu.schema.generated.datamodel.asset.Id
  ) : IdBox(), ScaleReader<AssetId>, ScaleWriter<AssetId> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): AssetId = AssetId(assetId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: AssetId): Unit {
      writer.directWrite(this.discriminant());
      assetId.write(writer, instance.assetId))
    }
  }

  /**
   * 'AssetDefinitionId' variant
   */
  public class AssetDefinitionId(
    private val assetDefinitionId: DefinitionId
  ) : IdBox(), ScaleReader<AssetDefinitionId>, ScaleWriter<AssetDefinitionId> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): AssetDefinitionId =
        AssetDefinitionId(assetDefinitionId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: AssetDefinitionId): Unit {
      writer.directWrite(this.discriminant());
      assetDefinitionId.write(writer, instance.assetDefinitionId))
    }
  }

  /**
   * 'DomainName' variant
   */
  public class DomainName(
    private val domainName: String
  ) : IdBox(), ScaleReader<DomainName>, ScaleWriter<DomainName> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): DomainName =
        DomainName(domainName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: DomainName): Unit {
      writer.directWrite(this.discriminant());
      domainName.write(writer, instance.domainName))
    }
  }

  /**
   * 'PeerId' variant
   */
  public class PeerId(
    private val peerId: jp.co.soramitsu.schema.generated.datamodel.peer.Id
  ) : IdBox(), ScaleReader<PeerId>, ScaleWriter<PeerId> {
    public override fun discriminant(): Int = 4

    public override fun read(reader: ScaleCodecReader): PeerId = PeerId(peerId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: PeerId): Unit {
      writer.directWrite(this.discriminant());
      peerId.write(writer, instance.peerId))
    }
  }

  /**
   * 'WorldId' variant
   */
  public class WorldId : IdBox() {
    public override fun discriminant(): Int = 5
  }
}
