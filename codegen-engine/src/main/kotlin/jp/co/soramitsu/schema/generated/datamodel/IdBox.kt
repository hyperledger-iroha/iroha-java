// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleReader
import jp.co.soramitsu.schema.generated.datamodel.account.Id
import jp.co.soramitsu.schema.generated.datamodel.asset.DefinitionId
import kotlin.Int
import kotlin.String

/**
 * IdBox
 *
 * Generated from 'iroha_data_model::IdBox' enum
 */
public abstract class IdBox {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'AccountId' variant
   */
  public class AccountId(
    private val accountId: Id
  ) : IdBox() {
    public override fun discriminant(): Int = 0

    public companion object READER : ScaleReader<AccountId> {
      public override fun read(reader: ScaleCodecReader): AccountId {
      }
    }
  }

  /**
   * 'AssetId' variant
   */
  public class AssetId(
    private val assetId: jp.co.soramitsu.schema.generated.datamodel.asset.Id
  ) : IdBox() {
    public override fun discriminant(): Int = 1

    public companion object READER : ScaleReader<AssetId> {
      public override fun read(reader: ScaleCodecReader): AssetId {
      }
    }
  }

  /**
   * 'AssetDefinitionId' variant
   */
  public class AssetDefinitionId(
    private val assetDefinitionId: DefinitionId
  ) : IdBox() {
    public override fun discriminant(): Int = 2

    public companion object READER : ScaleReader<AssetDefinitionId> {
      public override fun read(reader: ScaleCodecReader): AssetDefinitionId {
      }
    }
  }

  /**
   * 'DomainName' variant
   */
  public class DomainName(
    private val domainName: String
  ) : IdBox() {
    public override fun discriminant(): Int = 3

    public companion object READER : ScaleReader<DomainName> {
      public override fun read(reader: ScaleCodecReader): DomainName {
      }
    }
  }

  /**
   * 'PeerId' variant
   */
  public class PeerId(
    private val peerId: jp.co.soramitsu.schema.generated.datamodel.peer.Id
  ) : IdBox() {
    public override fun discriminant(): Int = 4

    public companion object READER : ScaleReader<PeerId> {
      public override fun read(reader: ScaleCodecReader): PeerId {
      }
    }
  }

  /**
   * 'WorldId' variant
   */
  public class WorldId : IdBox() {
    public override fun discriminant(): Int = 5
  }
}
