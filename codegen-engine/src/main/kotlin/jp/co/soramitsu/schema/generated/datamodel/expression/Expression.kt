// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.expression

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleReader
import jp.co.soramitsu.schema.generated.datamodel.Value
import jp.co.soramitsu.schema.generated.datamodel.query.QueryBox
import kotlin.Int

/**
 * Expression
 *
 * Generated from 'iroha_data_model::expression::Expression' enum
 */
public abstract class Expression {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Add' variant
   */
  public class Add(
    private val add: jp.co.soramitsu.schema.generated.datamodel.expression.Add
  ) : Expression() {
    public override fun discriminant(): Int = 0

    public companion object READER : ScaleReader<Add> {
      public override fun read(reader: ScaleCodecReader): Add {
      }
    }
  }

  /**
   * 'Subtract' variant
   */
  public class Subtract(
    private val subtract: jp.co.soramitsu.schema.generated.datamodel.expression.Subtract
  ) : Expression() {
    public override fun discriminant(): Int = 1

    public companion object READER : ScaleReader<Subtract> {
      public override fun read(reader: ScaleCodecReader): Subtract {
      }
    }
  }

  /**
   * 'Multiply' variant
   */
  public class Multiply(
    private val multiply: jp.co.soramitsu.schema.generated.datamodel.expression.Multiply
  ) : Expression() {
    public override fun discriminant(): Int = 2

    public companion object READER : ScaleReader<Multiply> {
      public override fun read(reader: ScaleCodecReader): Multiply {
      }
    }
  }

  /**
   * 'Divide' variant
   */
  public class Divide(
    private val divide: jp.co.soramitsu.schema.generated.datamodel.expression.Divide
  ) : Expression() {
    public override fun discriminant(): Int = 3

    public companion object READER : ScaleReader<Divide> {
      public override fun read(reader: ScaleCodecReader): Divide {
      }
    }
  }

  /**
   * 'Mod' variant
   */
  public class Mod(
    private val mod: jp.co.soramitsu.schema.generated.datamodel.expression.Mod
  ) : Expression() {
    public override fun discriminant(): Int = 4

    public companion object READER : ScaleReader<Mod> {
      public override fun read(reader: ScaleCodecReader): Mod {
      }
    }
  }

  /**
   * 'RaiseTo' variant
   */
  public class RaiseTo(
    private val raiseTo: jp.co.soramitsu.schema.generated.datamodel.expression.RaiseTo
  ) : Expression() {
    public override fun discriminant(): Int = 5

    public companion object READER : ScaleReader<RaiseTo> {
      public override fun read(reader: ScaleCodecReader): RaiseTo {
      }
    }
  }

  /**
   * 'Greater' variant
   */
  public class Greater(
    private val greater: jp.co.soramitsu.schema.generated.datamodel.expression.Greater
  ) : Expression() {
    public override fun discriminant(): Int = 6

    public companion object READER : ScaleReader<Greater> {
      public override fun read(reader: ScaleCodecReader): Greater {
      }
    }
  }

  /**
   * 'Less' variant
   */
  public class Less(
    private val less: jp.co.soramitsu.schema.generated.datamodel.expression.Less
  ) : Expression() {
    public override fun discriminant(): Int = 7

    public companion object READER : ScaleReader<Less> {
      public override fun read(reader: ScaleCodecReader): Less {
      }
    }
  }

  /**
   * 'Equal' variant
   */
  public class Equal(
    private val equal: jp.co.soramitsu.schema.generated.datamodel.expression.Equal
  ) : Expression() {
    public override fun discriminant(): Int = 8

    public companion object READER : ScaleReader<Equal> {
      public override fun read(reader: ScaleCodecReader): Equal {
      }
    }
  }

  /**
   * 'Not' variant
   */
  public class Not(
    private val not: jp.co.soramitsu.schema.generated.datamodel.expression.Not
  ) : Expression() {
    public override fun discriminant(): Int = 9

    public companion object READER : ScaleReader<Not> {
      public override fun read(reader: ScaleCodecReader): Not {
      }
    }
  }

  /**
   * 'And' variant
   */
  public class And(
    private val and: jp.co.soramitsu.schema.generated.datamodel.expression.And
  ) : Expression() {
    public override fun discriminant(): Int = 10

    public companion object READER : ScaleReader<And> {
      public override fun read(reader: ScaleCodecReader): And {
      }
    }
  }

  /**
   * 'Or' variant
   */
  public class Or(
    private val or: jp.co.soramitsu.schema.generated.datamodel.expression.Or
  ) : Expression() {
    public override fun discriminant(): Int = 11

    public companion object READER : ScaleReader<Or> {
      public override fun read(reader: ScaleCodecReader): Or {
      }
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.expression.If
  ) : Expression() {
    public override fun discriminant(): Int = 12

    public companion object READER : ScaleReader<If> {
      public override fun read(reader: ScaleCodecReader): If {
      }
    }
  }

  /**
   * 'Raw' variant
   */
  public class Raw(
    private val raw: Value
  ) : Expression() {
    public override fun discriminant(): Int = 13

    public companion object READER : ScaleReader<Raw> {
      public override fun read(reader: ScaleCodecReader): Raw {
      }
    }
  }

  /**
   * 'Query' variant
   */
  public class Query(
    private val query: QueryBox
  ) : Expression() {
    public override fun discriminant(): Int = 14

    public companion object READER : ScaleReader<Query> {
      public override fun read(reader: ScaleCodecReader): Query {
      }
    }
  }

  /**
   * 'Contains' variant
   */
  public class Contains(
    private val contains: jp.co.soramitsu.schema.generated.datamodel.expression.Contains
  ) : Expression() {
    public override fun discriminant(): Int = 15

    public companion object READER : ScaleReader<Contains> {
      public override fun read(reader: ScaleCodecReader): Contains {
      }
    }
  }

  /**
   * 'ContainsAll' variant
   */
  public class ContainsAll(
    private val containsAll: jp.co.soramitsu.schema.generated.datamodel.expression.ContainsAll
  ) : Expression() {
    public override fun discriminant(): Int = 16

    public companion object READER : ScaleReader<ContainsAll> {
      public override fun read(reader: ScaleCodecReader): ContainsAll {
      }
    }
  }

  /**
   * 'ContainsAny' variant
   */
  public class ContainsAny(
    private val containsAny: jp.co.soramitsu.schema.generated.datamodel.expression.ContainsAny
  ) : Expression() {
    public override fun discriminant(): Int = 17

    public companion object READER : ScaleReader<ContainsAny> {
      public override fun read(reader: ScaleCodecReader): ContainsAny {
      }
    }
  }

  /**
   * 'Where' variant
   */
  public class Where(
    private val `where`: jp.co.soramitsu.schema.generated.datamodel.expression.Where
  ) : Expression() {
    public override fun discriminant(): Int = 18

    public companion object READER : ScaleReader<Where> {
      public override fun read(reader: ScaleCodecReader): Where {
      }
    }
  }

  /**
   * 'ContextValue' variant
   */
  public class ContextValue(
    private val contextValue: jp.co.soramitsu.schema.generated.datamodel.expression.ContextValue
  ) : Expression() {
    public override fun discriminant(): Int = 19

    public companion object READER : ScaleReader<ContextValue> {
      public override fun read(reader: ScaleCodecReader): ContextValue {
      }
    }
  }
}
