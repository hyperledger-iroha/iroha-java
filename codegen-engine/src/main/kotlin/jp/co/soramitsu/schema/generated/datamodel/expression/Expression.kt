// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.expression

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.codegen.read
import jp.co.soramitsu.schema.codegen.write
import jp.co.soramitsu.schema.generated.datamodel.Value
import jp.co.soramitsu.schema.generated.datamodel.query.QueryBox
import kotlin.Int
import kotlin.Unit

/**
 * Expression
 *
 * Generated from 'iroha_data_model::expression::Expression' enum
 */
public abstract class Expression {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Add' variant
   */
  public class Add(
    private val add: jp.co.soramitsu.schema.generated.datamodel.expression.Add
  ) : Expression(), ScaleReader<Add>, ScaleWriter<Add> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): Add = Add(add.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Add): Unit {
      writer.directWrite(this.discriminant());
      add.write(writer, instance.add))
    }
  }

  /**
   * 'Subtract' variant
   */
  public class Subtract(
    private val subtract: jp.co.soramitsu.schema.generated.datamodel.expression.Subtract
  ) : Expression(), ScaleReader<Subtract>, ScaleWriter<Subtract> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): Subtract = Subtract(subtract.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Subtract): Unit {
      writer.directWrite(this.discriminant());
      subtract.write(writer, instance.subtract))
    }
  }

  /**
   * 'Multiply' variant
   */
  public class Multiply(
    private val multiply: jp.co.soramitsu.schema.generated.datamodel.expression.Multiply
  ) : Expression(), ScaleReader<Multiply>, ScaleWriter<Multiply> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): Multiply = Multiply(multiply.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Multiply): Unit {
      writer.directWrite(this.discriminant());
      multiply.write(writer, instance.multiply))
    }
  }

  /**
   * 'Divide' variant
   */
  public class Divide(
    private val divide: jp.co.soramitsu.schema.generated.datamodel.expression.Divide
  ) : Expression(), ScaleReader<Divide>, ScaleWriter<Divide> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): Divide = Divide(divide.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Divide): Unit {
      writer.directWrite(this.discriminant());
      divide.write(writer, instance.divide))
    }
  }

  /**
   * 'Mod' variant
   */
  public class Mod(
    private val mod: jp.co.soramitsu.schema.generated.datamodel.expression.Mod
  ) : Expression(), ScaleReader<Mod>, ScaleWriter<Mod> {
    public override fun discriminant(): Int = 4

    public override fun read(reader: ScaleCodecReader): Mod = Mod(mod.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Mod): Unit {
      writer.directWrite(this.discriminant());
      mod.write(writer, instance.mod))
    }
  }

  /**
   * 'RaiseTo' variant
   */
  public class RaiseTo(
    private val raiseTo: jp.co.soramitsu.schema.generated.datamodel.expression.RaiseTo
  ) : Expression(), ScaleReader<RaiseTo>, ScaleWriter<RaiseTo> {
    public override fun discriminant(): Int = 5

    public override fun read(reader: ScaleCodecReader): RaiseTo = RaiseTo(raiseTo.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: RaiseTo): Unit {
      writer.directWrite(this.discriminant());
      raiseTo.write(writer, instance.raiseTo))
    }
  }

  /**
   * 'Greater' variant
   */
  public class Greater(
    private val greater: jp.co.soramitsu.schema.generated.datamodel.expression.Greater
  ) : Expression(), ScaleReader<Greater>, ScaleWriter<Greater> {
    public override fun discriminant(): Int = 6

    public override fun read(reader: ScaleCodecReader): Greater = Greater(greater.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Greater): Unit {
      writer.directWrite(this.discriminant());
      greater.write(writer, instance.greater))
    }
  }

  /**
   * 'Less' variant
   */
  public class Less(
    private val less: jp.co.soramitsu.schema.generated.datamodel.expression.Less
  ) : Expression(), ScaleReader<Less>, ScaleWriter<Less> {
    public override fun discriminant(): Int = 7

    public override fun read(reader: ScaleCodecReader): Less = Less(less.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Less): Unit {
      writer.directWrite(this.discriminant());
      less.write(writer, instance.less))
    }
  }

  /**
   * 'Equal' variant
   */
  public class Equal(
    private val equal: jp.co.soramitsu.schema.generated.datamodel.expression.Equal
  ) : Expression(), ScaleReader<Equal>, ScaleWriter<Equal> {
    public override fun discriminant(): Int = 8

    public override fun read(reader: ScaleCodecReader): Equal = Equal(equal.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Equal): Unit {
      writer.directWrite(this.discriminant());
      equal.write(writer, instance.equal))
    }
  }

  /**
   * 'Not' variant
   */
  public class Not(
    private val not: jp.co.soramitsu.schema.generated.datamodel.expression.Not
  ) : Expression(), ScaleReader<Not>, ScaleWriter<Not> {
    public override fun discriminant(): Int = 9

    public override fun read(reader: ScaleCodecReader): Not = Not(not.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Not): Unit {
      writer.directWrite(this.discriminant());
      not.write(writer, instance.not))
    }
  }

  /**
   * 'And' variant
   */
  public class And(
    private val and: jp.co.soramitsu.schema.generated.datamodel.expression.And
  ) : Expression(), ScaleReader<And>, ScaleWriter<And> {
    public override fun discriminant(): Int = 10

    public override fun read(reader: ScaleCodecReader): And = And(and.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: And): Unit {
      writer.directWrite(this.discriminant());
      and.write(writer, instance.and))
    }
  }

  /**
   * 'Or' variant
   */
  public class Or(
    private val or: jp.co.soramitsu.schema.generated.datamodel.expression.Or
  ) : Expression(), ScaleReader<Or>, ScaleWriter<Or> {
    public override fun discriminant(): Int = 11

    public override fun read(reader: ScaleCodecReader): Or = Or(or.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Or): Unit {
      writer.directWrite(this.discriminant());
      or.write(writer, instance.or))
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.expression.If
  ) : Expression(), ScaleReader<If>, ScaleWriter<If> {
    public override fun discriminant(): Int = 12

    public override fun read(reader: ScaleCodecReader): If = If(if.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: If): Unit {
      writer.directWrite(this.discriminant());
      if.write(writer, instance.if))
    }
  }

  /**
   * 'Raw' variant
   */
  public class Raw(
    private val raw: Value
  ) : Expression(), ScaleReader<Raw>, ScaleWriter<Raw> {
    public override fun discriminant(): Int = 13

    public override fun read(reader: ScaleCodecReader): Raw = Raw(raw.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Raw): Unit {
      writer.directWrite(this.discriminant());
      raw.write(writer, instance.raw))
    }
  }

  /**
   * 'Query' variant
   */
  public class Query(
    private val query: QueryBox
  ) : Expression(), ScaleReader<Query>, ScaleWriter<Query> {
    public override fun discriminant(): Int = 14

    public override fun read(reader: ScaleCodecReader): Query = Query(query.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Query): Unit {
      writer.directWrite(this.discriminant());
      query.write(writer, instance.query))
    }
  }

  /**
   * 'Contains' variant
   */
  public class Contains(
    private val contains: jp.co.soramitsu.schema.generated.datamodel.expression.Contains
  ) : Expression(), ScaleReader<Contains>, ScaleWriter<Contains> {
    public override fun discriminant(): Int = 15

    public override fun read(reader: ScaleCodecReader): Contains = Contains(contains.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Contains): Unit {
      writer.directWrite(this.discriminant());
      contains.write(writer, instance.contains))
    }
  }

  /**
   * 'ContainsAll' variant
   */
  public class ContainsAll(
    private val containsAll: jp.co.soramitsu.schema.generated.datamodel.expression.ContainsAll
  ) : Expression(), ScaleReader<ContainsAll>, ScaleWriter<ContainsAll> {
    public override fun discriminant(): Int = 16

    public override fun read(reader: ScaleCodecReader): ContainsAll =
        ContainsAll(containsAll.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: ContainsAll): Unit {
      writer.directWrite(this.discriminant());
      containsAll.write(writer, instance.containsAll))
    }
  }

  /**
   * 'ContainsAny' variant
   */
  public class ContainsAny(
    private val containsAny: jp.co.soramitsu.schema.generated.datamodel.expression.ContainsAny
  ) : Expression(), ScaleReader<ContainsAny>, ScaleWriter<ContainsAny> {
    public override fun discriminant(): Int = 17

    public override fun read(reader: ScaleCodecReader): ContainsAny =
        ContainsAny(containsAny.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: ContainsAny): Unit {
      writer.directWrite(this.discriminant());
      containsAny.write(writer, instance.containsAny))
    }
  }

  /**
   * 'Where' variant
   */
  public class Where(
    private val `where`: jp.co.soramitsu.schema.generated.datamodel.expression.Where
  ) : Expression(), ScaleReader<Where>, ScaleWriter<Where> {
    public override fun discriminant(): Int = 18

    public override fun read(reader: ScaleCodecReader): Where = Where(where.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Where): Unit {
      writer.directWrite(this.discriminant());
      where.write(writer, instance.where))
    }
  }

  /**
   * 'ContextValue' variant
   */
  public class ContextValue(
    private val contextValue: jp.co.soramitsu.schema.generated.datamodel.expression.ContextValue
  ) : Expression(), ScaleReader<ContextValue>, ScaleWriter<ContextValue> {
    public override fun discriminant(): Int = 19

    public override fun read(reader: ScaleCodecReader): ContextValue =
        ContextValue(contextValue.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: ContextValue): Unit {
      writer.directWrite(this.discriminant());
      contextValue.write(writer, instance.contextValue))
    }
  }
}
