// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.transaction

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * TransactionValue
 *
 * Generated from 'iroha_data_model::transaction::TransactionValue' enum
 */
public sealed class TransactionValue {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Transaction' variant
   */
  public class Transaction(
    private val transaction: VersionedTransaction
  ) : TransactionValue() {
    public override fun discriminant(): Int = 0

    public companion object : ScaleReader<Transaction>, ScaleWriter<Transaction> {
      public override fun read(reader: ScaleCodecReader): Transaction =
          jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue.Transaction(jp.co.soramitsu.schema.generated.datamodel.transaction.VersionedTransaction.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: Transaction): Unit {
        jp.co.soramitsu.schema.generated.datamodel.transaction.VersionedTransaction.write(writer,
            instance.`transaction`)
      }
    }
  }

  /**
   * 'RejectedTransaction' variant
   */
  public class RejectedTransaction(
    private val rejectedTransaction: VersionedRejectedTransaction
  ) : TransactionValue() {
    public override fun discriminant(): Int = 1

    public companion object : ScaleReader<RejectedTransaction>, ScaleWriter<RejectedTransaction> {
      public override fun read(reader: ScaleCodecReader): RejectedTransaction =
          jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue.RejectedTransaction(jp.co.soramitsu.schema.generated.datamodel.transaction.VersionedRejectedTransaction.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: RejectedTransaction): Unit {
        jp.co.soramitsu.schema.generated.datamodel.transaction.VersionedRejectedTransaction.write(writer,
            instance.`rejectedTransaction`)
      }
    }
  }

  public companion object : ScaleReader<TransactionValue>, ScaleWriter<TransactionValue> {
    public override fun read(reader: ScaleCodecReader): TransactionValue = when(reader.readUByte())
        {
    	0 -> Transaction.read(reader)
    	1 -> RejectedTransaction.read(reader)
    	else -> throw RuntimeException("Unresolved discriminant of the enum variant")
    }

    public override fun write(writer: ScaleCodecWriter, instance: TransactionValue): Unit {
      writer.directWrite(instance.discriminant())
      when(instance.discriminant()) {
      	0 -> Transaction.write(writer, instance as Transaction)
      	1 -> RejectedTransaction.write(writer, instance as RejectedTransaction)
      	else -> throw RuntimeException("Unresolved discriminant of the enum variant")
      }
    }
  }
}
