// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.query

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.codegen.read
import jp.co.soramitsu.schema.codegen.write
import kotlin.Int
import kotlin.Unit

/**
 * QueryBox
 *
 * Generated from 'iroha_data_model::query::QueryBox' enum
 */
public abstract class QueryBox {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'FindAllAccounts' variant
   */
  public class FindAllAccounts(
    private val findAllAccounts:
        jp.co.soramitsu.schema.generated.datamodel.query.account.FindAllAccounts
  ) : QueryBox(), ScaleReader<FindAllAccounts>, ScaleWriter<FindAllAccounts> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): FindAllAccounts =
        FindAllAccounts(findAllAccounts.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAllAccounts): Unit {
      writer.directWrite(this.discriminant());
      findAllAccounts.write(writer, instance.findAllAccounts))
    }
  }

  /**
   * 'FindAccountById' variant
   */
  public class FindAccountById(
    private val findAccountById:
        jp.co.soramitsu.schema.generated.datamodel.query.account.FindAccountById
  ) : QueryBox(), ScaleReader<FindAccountById>, ScaleWriter<FindAccountById> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): FindAccountById =
        FindAccountById(findAccountById.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAccountById): Unit {
      writer.directWrite(this.discriminant());
      findAccountById.write(writer, instance.findAccountById))
    }
  }

  /**
   * 'FindAccountKeyValueByIdAndKey' variant
   */
  public class FindAccountKeyValueByIdAndKey(
    private val findAccountKeyValueByIdAndKey:
        jp.co.soramitsu.schema.generated.datamodel.query.account.FindAccountKeyValueByIdAndKey
  ) : QueryBox(), ScaleReader<FindAccountKeyValueByIdAndKey>,
      ScaleWriter<FindAccountKeyValueByIdAndKey> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): FindAccountKeyValueByIdAndKey =
        FindAccountKeyValueByIdAndKey(findAccountKeyValueByIdAndKey.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAccountKeyValueByIdAndKey):
        Unit {
      writer.directWrite(this.discriminant());
      findAccountKeyValueByIdAndKey.write(writer, instance.findAccountKeyValueByIdAndKey))
    }
  }

  /**
   * 'FindAccountsByName' variant
   */
  public class FindAccountsByName(
    private val findAccountsByName:
        jp.co.soramitsu.schema.generated.datamodel.query.account.FindAccountsByName
  ) : QueryBox(), ScaleReader<FindAccountsByName>, ScaleWriter<FindAccountsByName> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): FindAccountsByName =
        FindAccountsByName(findAccountsByName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAccountsByName): Unit {
      writer.directWrite(this.discriminant());
      findAccountsByName.write(writer, instance.findAccountsByName))
    }
  }

  /**
   * 'FindAccountsByDomainName' variant
   */
  public class FindAccountsByDomainName(
    private val findAccountsByDomainName:
        jp.co.soramitsu.schema.generated.datamodel.query.account.FindAccountsByDomainName
  ) : QueryBox(), ScaleReader<FindAccountsByDomainName>, ScaleWriter<FindAccountsByDomainName> {
    public override fun discriminant(): Int = 4

    public override fun read(reader: ScaleCodecReader): FindAccountsByDomainName =
        FindAccountsByDomainName(findAccountsByDomainName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAccountsByDomainName): Unit {
      writer.directWrite(this.discriminant());
      findAccountsByDomainName.write(writer, instance.findAccountsByDomainName))
    }
  }

  /**
   * 'FindAllAssets' variant
   */
  public class FindAllAssets(
    private val findAllAssets: jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAllAssets
  ) : QueryBox(), ScaleReader<FindAllAssets>, ScaleWriter<FindAllAssets> {
    public override fun discriminant(): Int = 5

    public override fun read(reader: ScaleCodecReader): FindAllAssets =
        FindAllAssets(findAllAssets.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAllAssets): Unit {
      writer.directWrite(this.discriminant());
      findAllAssets.write(writer, instance.findAllAssets))
    }
  }

  /**
   * 'FindAllAssetsDefinitions' variant
   */
  public class FindAllAssetsDefinitions(
    private val findAllAssetsDefinitions:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAllAssetsDefinitions
  ) : QueryBox(), ScaleReader<FindAllAssetsDefinitions>, ScaleWriter<FindAllAssetsDefinitions> {
    public override fun discriminant(): Int = 6

    public override fun read(reader: ScaleCodecReader): FindAllAssetsDefinitions =
        FindAllAssetsDefinitions(findAllAssetsDefinitions.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAllAssetsDefinitions): Unit {
      writer.directWrite(this.discriminant());
      findAllAssetsDefinitions.write(writer, instance.findAllAssetsDefinitions))
    }
  }

  /**
   * 'FindAssetById' variant
   */
  public class FindAssetById(
    private val findAssetById: jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetById
  ) : QueryBox(), ScaleReader<FindAssetById>, ScaleWriter<FindAssetById> {
    public override fun discriminant(): Int = 7

    public override fun read(reader: ScaleCodecReader): FindAssetById =
        FindAssetById(findAssetById.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetById): Unit {
      writer.directWrite(this.discriminant());
      findAssetById.write(writer, instance.findAssetById))
    }
  }

  /**
   * 'FindAssetsByName' variant
   */
  public class FindAssetsByName(
    private val findAssetsByName:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByName
  ) : QueryBox(), ScaleReader<FindAssetsByName>, ScaleWriter<FindAssetsByName> {
    public override fun discriminant(): Int = 8

    public override fun read(reader: ScaleCodecReader): FindAssetsByName =
        FindAssetsByName(findAssetsByName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetsByName): Unit {
      writer.directWrite(this.discriminant());
      findAssetsByName.write(writer, instance.findAssetsByName))
    }
  }

  /**
   * 'FindAssetsByAccountId' variant
   */
  public class FindAssetsByAccountId(
    private val findAssetsByAccountId:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByAccountId
  ) : QueryBox(), ScaleReader<FindAssetsByAccountId>, ScaleWriter<FindAssetsByAccountId> {
    public override fun discriminant(): Int = 9

    public override fun read(reader: ScaleCodecReader): FindAssetsByAccountId =
        FindAssetsByAccountId(findAssetsByAccountId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetsByAccountId): Unit {
      writer.directWrite(this.discriminant());
      findAssetsByAccountId.write(writer, instance.findAssetsByAccountId))
    }
  }

  /**
   * 'FindAssetsByAssetDefinitionId' variant
   */
  public class FindAssetsByAssetDefinitionId(
    private val findAssetsByAssetDefinitionId:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByAssetDefinitionId
  ) : QueryBox(), ScaleReader<FindAssetsByAssetDefinitionId>,
      ScaleWriter<FindAssetsByAssetDefinitionId> {
    public override fun discriminant(): Int = 10

    public override fun read(reader: ScaleCodecReader): FindAssetsByAssetDefinitionId =
        FindAssetsByAssetDefinitionId(findAssetsByAssetDefinitionId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetsByAssetDefinitionId):
        Unit {
      writer.directWrite(this.discriminant());
      findAssetsByAssetDefinitionId.write(writer, instance.findAssetsByAssetDefinitionId))
    }
  }

  /**
   * 'FindAssetsByDomainName' variant
   */
  public class FindAssetsByDomainName(
    private val findAssetsByDomainName:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByDomainName
  ) : QueryBox(), ScaleReader<FindAssetsByDomainName>, ScaleWriter<FindAssetsByDomainName> {
    public override fun discriminant(): Int = 11

    public override fun read(reader: ScaleCodecReader): FindAssetsByDomainName =
        FindAssetsByDomainName(findAssetsByDomainName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetsByDomainName): Unit {
      writer.directWrite(this.discriminant());
      findAssetsByDomainName.write(writer, instance.findAssetsByDomainName))
    }
  }

  /**
   * 'FindAssetsByAccountIdAndAssetDefinitionId' variant
   */
  public class FindAssetsByAccountIdAndAssetDefinitionId(
    private val findAssetsByAccountIdAndAssetDefinitionId:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByAccountIdAndAssetDefinitionId
  ) : QueryBox(), ScaleReader<FindAssetsByAccountIdAndAssetDefinitionId>,
      ScaleWriter<FindAssetsByAccountIdAndAssetDefinitionId> {
    public override fun discriminant(): Int = 12

    public override fun read(reader: ScaleCodecReader): FindAssetsByAccountIdAndAssetDefinitionId =
        FindAssetsByAccountIdAndAssetDefinitionId(findAssetsByAccountIdAndAssetDefinitionId.read(reader))

    public override fun write(writer: ScaleCodecWriter,
        instance: FindAssetsByAccountIdAndAssetDefinitionId): Unit {
      writer.directWrite(this.discriminant());
      findAssetsByAccountIdAndAssetDefinitionId.write(writer,
          instance.findAssetsByAccountIdAndAssetDefinitionId))
    }
  }

  /**
   * 'FindAssetsByDomainNameAndAssetDefinitionId' variant
   */
  public class FindAssetsByDomainNameAndAssetDefinitionId(
    private val findAssetsByDomainNameAndAssetDefinitionId:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetsByDomainNameAndAssetDefinitionId
  ) : QueryBox(), ScaleReader<FindAssetsByDomainNameAndAssetDefinitionId>,
      ScaleWriter<FindAssetsByDomainNameAndAssetDefinitionId> {
    public override fun discriminant(): Int = 13

    public override fun read(reader: ScaleCodecReader): FindAssetsByDomainNameAndAssetDefinitionId =
        FindAssetsByDomainNameAndAssetDefinitionId(findAssetsByDomainNameAndAssetDefinitionId.read(reader))

    public override fun write(writer: ScaleCodecWriter,
        instance: FindAssetsByDomainNameAndAssetDefinitionId): Unit {
      writer.directWrite(this.discriminant());
      findAssetsByDomainNameAndAssetDefinitionId.write(writer,
          instance.findAssetsByDomainNameAndAssetDefinitionId))
    }
  }

  /**
   * 'FindAssetQuantityById' variant
   */
  public class FindAssetQuantityById(
    private val findAssetQuantityById:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetQuantityById
  ) : QueryBox(), ScaleReader<FindAssetQuantityById>, ScaleWriter<FindAssetQuantityById> {
    public override fun discriminant(): Int = 14

    public override fun read(reader: ScaleCodecReader): FindAssetQuantityById =
        FindAssetQuantityById(findAssetQuantityById.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetQuantityById): Unit {
      writer.directWrite(this.discriminant());
      findAssetQuantityById.write(writer, instance.findAssetQuantityById))
    }
  }

  /**
   * 'FindAssetKeyValueByIdAndKey' variant
   */
  public class FindAssetKeyValueByIdAndKey(
    private val findAssetKeyValueByIdAndKey:
        jp.co.soramitsu.schema.generated.datamodel.query.asset.FindAssetKeyValueByIdAndKey
  ) : QueryBox(), ScaleReader<FindAssetKeyValueByIdAndKey>, ScaleWriter<FindAssetKeyValueByIdAndKey>
      {
    public override fun discriminant(): Int = 15

    public override fun read(reader: ScaleCodecReader): FindAssetKeyValueByIdAndKey =
        FindAssetKeyValueByIdAndKey(findAssetKeyValueByIdAndKey.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAssetKeyValueByIdAndKey):
        Unit {
      writer.directWrite(this.discriminant());
      findAssetKeyValueByIdAndKey.write(writer, instance.findAssetKeyValueByIdAndKey))
    }
  }

  /**
   * 'FindAllDomains' variant
   */
  public class FindAllDomains(
    private val findAllDomains:
        jp.co.soramitsu.schema.generated.datamodel.query.domain.FindAllDomains
  ) : QueryBox(), ScaleReader<FindAllDomains>, ScaleWriter<FindAllDomains> {
    public override fun discriminant(): Int = 16

    public override fun read(reader: ScaleCodecReader): FindAllDomains =
        FindAllDomains(findAllDomains.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAllDomains): Unit {
      writer.directWrite(this.discriminant());
      findAllDomains.write(writer, instance.findAllDomains))
    }
  }

  /**
   * 'FindDomainByName' variant
   */
  public class FindDomainByName(
    private val findDomainByName:
        jp.co.soramitsu.schema.generated.datamodel.query.domain.FindDomainByName
  ) : QueryBox(), ScaleReader<FindDomainByName>, ScaleWriter<FindDomainByName> {
    public override fun discriminant(): Int = 17

    public override fun read(reader: ScaleCodecReader): FindDomainByName =
        FindDomainByName(findDomainByName.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindDomainByName): Unit {
      writer.directWrite(this.discriminant());
      findDomainByName.write(writer, instance.findDomainByName))
    }
  }

  /**
   * 'FindAllPeers' variant
   */
  public class FindAllPeers(
    private val findAllPeers: jp.co.soramitsu.schema.generated.datamodel.query.peer.FindAllPeers
  ) : QueryBox(), ScaleReader<FindAllPeers>, ScaleWriter<FindAllPeers> {
    public override fun discriminant(): Int = 18

    public override fun read(reader: ScaleCodecReader): FindAllPeers =
        FindAllPeers(findAllPeers.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindAllPeers): Unit {
      writer.directWrite(this.discriminant());
      findAllPeers.write(writer, instance.findAllPeers))
    }
  }

  /**
   * 'FindTransactionsByAccountId' variant
   */
  public class FindTransactionsByAccountId(
    private val findTransactionsByAccountId:
        jp.co.soramitsu.schema.generated.datamodel.query.transaction.FindTransactionsByAccountId
  ) : QueryBox(), ScaleReader<FindTransactionsByAccountId>, ScaleWriter<FindTransactionsByAccountId>
      {
    public override fun discriminant(): Int = 19

    public override fun read(reader: ScaleCodecReader): FindTransactionsByAccountId =
        FindTransactionsByAccountId(findTransactionsByAccountId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindTransactionsByAccountId):
        Unit {
      writer.directWrite(this.discriminant());
      findTransactionsByAccountId.write(writer, instance.findTransactionsByAccountId))
    }
  }

  /**
   * 'FindPermissionTokensByAccountId' variant
   */
  public class FindPermissionTokensByAccountId(
    private val findPermissionTokensByAccountId:
        jp.co.soramitsu.schema.generated.datamodel.query.permissions.FindPermissionTokensByAccountId
  ) : QueryBox(), ScaleReader<FindPermissionTokensByAccountId>,
      ScaleWriter<FindPermissionTokensByAccountId> {
    public override fun discriminant(): Int = 20

    public override fun read(reader: ScaleCodecReader): FindPermissionTokensByAccountId =
        FindPermissionTokensByAccountId(findPermissionTokensByAccountId.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: FindPermissionTokensByAccountId):
        Unit {
      writer.directWrite(this.discriminant());
      findPermissionTokensByAccountId.write(writer, instance.findPermissionTokensByAccountId))
    }
  }
}
