// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * Parameter
 *
 * Generated from 'iroha_data_model::Parameter' enum
 */
public abstract class Parameter {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'MaximumFaultyPeersAmount' variant
   */
  public class MaximumFaultyPeersAmount(
    private val maximumFaultyPeersAmount: Int
  ) : Parameter(), ScaleReader<MaximumFaultyPeersAmount>, ScaleWriter<MaximumFaultyPeersAmount> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): MaximumFaultyPeersAmount =
        MaximumFaultyPeersAmount(maximumFaultyPeersAmount.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: MaximumFaultyPeersAmount): Unit {
      writer.directWrite(this.discriminant());
      maximumFaultyPeersAmount.write(writer, instance.maximumFaultyPeersAmount)
    }
  }

  /**
   * 'BlockTime' variant
   */
  public class BlockTime(
    private val blockTime: Int
  ) : Parameter(), ScaleReader<BlockTime>, ScaleWriter<BlockTime> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): BlockTime =
        BlockTime(blockTime.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: BlockTime): Unit {
      writer.directWrite(this.discriminant());
      blockTime.write(writer, instance.blockTime)
    }
  }

  /**
   * 'CommitTime' variant
   */
  public class CommitTime(
    private val commitTime: Int
  ) : Parameter(), ScaleReader<CommitTime>, ScaleWriter<CommitTime> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): CommitTime =
        CommitTime(commitTime.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: CommitTime): Unit {
      writer.directWrite(this.discriminant());
      commitTime.write(writer, instance.commitTime)
    }
  }

  /**
   * 'TransactionReceiptTime' variant
   */
  public class TransactionReceiptTime(
    private val transactionReceiptTime: Int
  ) : Parameter(), ScaleReader<TransactionReceiptTime>, ScaleWriter<TransactionReceiptTime> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): TransactionReceiptTime =
        TransactionReceiptTime(transactionReceiptTime.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: TransactionReceiptTime): Unit {
      writer.directWrite(this.discriminant());
      transactionReceiptTime.write(writer, instance.transactionReceiptTime)
    }
  }
}
