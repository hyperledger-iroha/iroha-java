// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * IdentifiableBox
 *
 * Generated from 'iroha_data_model::IdentifiableBox' enum
 */
public abstract class IdentifiableBox {
  /**
   * 'Account' variant
   */
  public class Account(
    private val account: jp.co.soramitsu.schema.generated.datamodel.account.Account
  ) : IdentifiableBox(), ScaleReader<Account>, ScaleWriter<Account> {
    public override fun read(reader: ScaleCodecReader): Account {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Account): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 0
    }
  }

  /**
   * 'NewAccount' variant
   */
  public class NewAccount(
    private val newAccount: jp.co.soramitsu.schema.generated.datamodel.account.NewAccount
  ) : IdentifiableBox(), ScaleReader<NewAccount>, ScaleWriter<NewAccount> {
    public override fun read(reader: ScaleCodecReader): NewAccount {
    }

    public override fun write(writer: ScaleCodecWriter, instance: NewAccount): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 1
    }
  }

  /**
   * 'Asset' variant
   */
  public class Asset(
    private val asset: jp.co.soramitsu.schema.generated.datamodel.asset.Asset
  ) : IdentifiableBox(), ScaleReader<Asset>, ScaleWriter<Asset> {
    public override fun read(reader: ScaleCodecReader): Asset {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Asset): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 2
    }
  }

  /**
   * 'AssetDefinition' variant
   */
  public class AssetDefinition(
    private val assetDefinition: jp.co.soramitsu.schema.generated.datamodel.asset.AssetDefinition
  ) : IdentifiableBox(), ScaleReader<AssetDefinition>, ScaleWriter<AssetDefinition> {
    public override fun read(reader: ScaleCodecReader): AssetDefinition {
    }

    public override fun write(writer: ScaleCodecWriter, instance: AssetDefinition): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 3
    }
  }

  /**
   * 'Domain' variant
   */
  public class Domain(
    private val domain: jp.co.soramitsu.schema.generated.datamodel.domain.Domain
  ) : IdentifiableBox(), ScaleReader<Domain>, ScaleWriter<Domain> {
    public override fun read(reader: ScaleCodecReader): Domain {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Domain): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 4
    }
  }

  /**
   * 'Peer' variant
   */
  public class Peer(
    private val peer: jp.co.soramitsu.schema.generated.datamodel.peer.Peer
  ) : IdentifiableBox(), ScaleReader<Peer>, ScaleWriter<Peer> {
    public override fun read(reader: ScaleCodecReader): Peer {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Peer): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 5
    }
  }

  /**
   * 'World' variant
   */
  public class World : IdentifiableBox(), ScaleReader<World>, ScaleWriter<World> {
    public override fun read(reader: ScaleCodecReader): World {
    }

    public override fun write(writer: ScaleCodecWriter, instance: World): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 6
    }
  }
}
