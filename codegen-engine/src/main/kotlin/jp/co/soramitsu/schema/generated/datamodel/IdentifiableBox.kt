// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * IdentifiableBox
 *
 * Generated from 'iroha_data_model::IdentifiableBox' enum
 */
public abstract class IdentifiableBox {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Account' variant
   */
  public class Account(
    private val account: jp.co.soramitsu.schema.generated.datamodel.account.Account
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 0

    public companion object CODEC : ScaleReader<Account>, ScaleWriter<Account> {
      public override fun read(reader: ScaleCodecReader): Account {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Account): Unit {
        writer.directWrite(this.discriminant())
        Account.write(writer, instance.account)
      }
    }
  }

  /**
   * 'NewAccount' variant
   */
  public class NewAccount(
    private val newAccount: jp.co.soramitsu.schema.generated.datamodel.account.NewAccount
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 1

    public companion object CODEC : ScaleReader<NewAccount>, ScaleWriter<NewAccount> {
      public override fun read(reader: ScaleCodecReader): NewAccount {
      }

      public override fun write(writer: ScaleCodecWriter, instance: NewAccount): Unit {
        writer.directWrite(this.discriminant())
        NewAccount.write(writer, instance.newAccount)
      }
    }
  }

  /**
   * 'Asset' variant
   */
  public class Asset(
    private val asset: jp.co.soramitsu.schema.generated.datamodel.asset.Asset
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 2

    public companion object CODEC : ScaleReader<Asset>, ScaleWriter<Asset> {
      public override fun read(reader: ScaleCodecReader): Asset {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Asset): Unit {
        writer.directWrite(this.discriminant())
        Asset.write(writer, instance.asset)
      }
    }
  }

  /**
   * 'AssetDefinition' variant
   */
  public class AssetDefinition(
    private val assetDefinition: jp.co.soramitsu.schema.generated.datamodel.asset.AssetDefinition
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 3

    public companion object CODEC : ScaleReader<AssetDefinition>, ScaleWriter<AssetDefinition> {
      public override fun read(reader: ScaleCodecReader): AssetDefinition {
      }

      public override fun write(writer: ScaleCodecWriter, instance: AssetDefinition): Unit {
        writer.directWrite(this.discriminant())
        AssetDefinition.write(writer, instance.assetDefinition)
      }
    }
  }

  /**
   * 'Domain' variant
   */
  public class Domain(
    private val domain: jp.co.soramitsu.schema.generated.datamodel.domain.Domain
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 4

    public companion object CODEC : ScaleReader<Domain>, ScaleWriter<Domain> {
      public override fun read(reader: ScaleCodecReader): Domain {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Domain): Unit {
        writer.directWrite(this.discriminant())
        Domain.write(writer, instance.domain)
      }
    }
  }

  /**
   * 'Peer' variant
   */
  public class Peer(
    private val peer: jp.co.soramitsu.schema.generated.datamodel.peer.Peer
  ) : IdentifiableBox() {
    public override fun discriminant(): Int = 5

    public companion object CODEC : ScaleReader<Peer>, ScaleWriter<Peer> {
      public override fun read(reader: ScaleCodecReader): Peer {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Peer): Unit {
        writer.directWrite(this.discriminant())
        Peer.write(writer, instance.peer)
      }
    }
  }

  /**
   * 'World' variant
   */
  public class World : IdentifiableBox() {
    public override fun discriminant(): Int = 6
  }
}
