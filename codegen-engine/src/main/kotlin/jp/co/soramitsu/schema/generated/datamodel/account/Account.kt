// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.account

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.generated.crypto.PublicKey
import jp.co.soramitsu.schema.generated.datamodel.asset.Asset
import jp.co.soramitsu.schema.generated.datamodel.metadata.Metadata
import jp.co.soramitsu.schema.generated.datamodel.permissions.PermissionToken
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.collections.Set

/**
 * Account
 *
 * Generated from 'iroha_data_model::account::Account' regular structure
 */
public class Account(
  private val id: Id,
  private val assets: Map<jp.co.soramitsu.schema.generated.datamodel.asset.Id, Asset>,
  private val signatories: List<PublicKey>,
  private val permissionTokens: Set<PermissionToken>,
  private val signatureCheckCondition: SignatureCheckCondition,
  private val metadata: Metadata
) {
  public companion object CODEC : ScaleReader<Account>, ScaleWriter<Account> {
    public override fun read(reader: ScaleCodecReader): Account = Account(Id.read(reader),
        reader.read(), reader.read(), Set.read(reader), SignatureCheckCondition.read(reader),
        Metadata.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Account): Unit {
      Id.write(writer, instance.id)
      Map.write(writer, instance.assets)
      List.write(writer, instance.signatories)
      Set.write(writer, instance.permissionTokens)
      SignatureCheckCondition.write(writer, instance.signatureCheckCondition)
      Metadata.write(writer, instance.metadata)
    }
  }
}
