// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.events.pipeline

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.codegen.read
import jp.co.soramitsu.schema.codegen.write
import kotlin.Int
import kotlin.Unit

/**
 * Status
 *
 * Generated from 'iroha_data_model::events::pipeline::Status' enum
 */
public abstract class Status {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Validating' variant
   */
  public class Validating : Status() {
    public override fun discriminant(): Int = 0
  }

  /**
   * 'Rejected' variant
   */
  public class Rejected(
    private val rejected: RejectionReason
  ) : Status(), ScaleReader<Rejected>, ScaleWriter<Rejected> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): Rejected = Rejected(rejected.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Rejected): Unit {
      writer.directWrite(this.discriminant());
      rejected.write(writer, instance.rejected))
    }
  }

  /**
   * 'Committed' variant
   */
  public class Committed : Status() {
    public override fun discriminant(): Int = 2
  }
}
