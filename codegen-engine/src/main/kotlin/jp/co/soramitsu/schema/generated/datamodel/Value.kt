// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Boolean
import kotlin.Int
import kotlin.Unit
import kotlin.collections.List

/**
 * Value
 *
 * Generated from 'iroha_data_model::Value' enum
 */
public abstract class Value {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'U32' variant
   */
  public class U32(
    private val u32: Int
  ) : Value() {
    public override fun discriminant(): Int = 0

    public companion object CODEC : ScaleReader<U32>, ScaleWriter<U32> {
      public override fun read(reader: ScaleCodecReader): U32 {
      }

      public override fun write(writer: ScaleCodecWriter, instance: U32): Unit {
        writer.directWrite(this.discriminant())
        writer.writeLong(instance.u32)
      }
    }
  }

  /**
   * 'Bool' variant
   */
  public class Bool(
    private val bool: Boolean
  ) : Value() {
    public override fun discriminant(): Int = 1

    public companion object CODEC : ScaleReader<Bool>, ScaleWriter<Bool> {
      public override fun read(reader: ScaleCodecReader): Bool {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Bool): Unit {
        writer.directWrite(this.discriminant())
        writer.writeBoolean(instance.bool)
      }
    }
  }

  /**
   * 'String' variant
   */
  public class String(
    private val string: kotlin.String
  ) : Value() {
    public override fun discriminant(): Int = 2

    public companion object CODEC : ScaleReader<String>, ScaleWriter<String> {
      public override fun read(reader: ScaleCodecReader): String {
      }

      public override fun write(writer: ScaleCodecWriter, instance: String): Unit {
        writer.directWrite(this.discriminant())
        writer.writeString(instance.string)
      }
    }
  }

  /**
   * 'Vec' variant
   */
  public class Vec(
    private val vec: List<Value>
  ) : Value() {
    public override fun discriminant(): Int = 3

    public companion object CODEC : ScaleReader<Vec>, ScaleWriter<Vec> {
      public override fun read(reader: ScaleCodecReader): Vec {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Vec): Unit {
        writer.directWrite(this.discriminant())
        List.write(writer, instance.vec)
      }
    }
  }

  /**
   * 'Id' variant
   */
  public class Id(
    private val id: IdBox
  ) : Value() {
    public override fun discriminant(): Int = 4

    public companion object CODEC : ScaleReader<Id>, ScaleWriter<Id> {
      public override fun read(reader: ScaleCodecReader): Id {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Id): Unit {
        writer.directWrite(this.discriminant())
        IdBox.write(writer, instance.id)
      }
    }
  }

  /**
   * 'Identifiable' variant
   */
  public class Identifiable(
    private val identifiable: IdentifiableBox
  ) : Value() {
    public override fun discriminant(): Int = 5

    public companion object CODEC : ScaleReader<Identifiable>, ScaleWriter<Identifiable> {
      public override fun read(reader: ScaleCodecReader): Identifiable {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Identifiable): Unit {
        writer.directWrite(this.discriminant())
        IdentifiableBox.write(writer, instance.identifiable)
      }
    }
  }

  /**
   * 'PublicKey' variant
   */
  public class PublicKey(
    private val publicKey: jp.co.soramitsu.schema.generated.crypto.PublicKey
  ) : Value() {
    public override fun discriminant(): Int = 6

    public companion object CODEC : ScaleReader<PublicKey>, ScaleWriter<PublicKey> {
      public override fun read(reader: ScaleCodecReader): PublicKey {
      }

      public override fun write(writer: ScaleCodecWriter, instance: PublicKey): Unit {
        writer.directWrite(this.discriminant())
        PublicKey.write(writer, instance.publicKey)
      }
    }
  }

  /**
   * 'Parameter' variant
   */
  public class Parameter(
    private val parameter: jp.co.soramitsu.schema.generated.datamodel.Parameter
  ) : Value() {
    public override fun discriminant(): Int = 7

    public companion object CODEC : ScaleReader<Parameter>, ScaleWriter<Parameter> {
      public override fun read(reader: ScaleCodecReader): Parameter {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Parameter): Unit {
        writer.directWrite(this.discriminant())
        Parameter.write(writer, instance.parameter)
      }
    }
  }

  /**
   * 'SignatureCheckCondition' variant
   */
  public class SignatureCheckCondition(
    private val signatureCheckCondition:
        jp.co.soramitsu.schema.generated.datamodel.account.SignatureCheckCondition
  ) : Value() {
    public override fun discriminant(): Int = 8

    public companion object CODEC : ScaleReader<SignatureCheckCondition>,
        ScaleWriter<SignatureCheckCondition> {
      public override fun read(reader: ScaleCodecReader): SignatureCheckCondition {
      }

      public override fun write(writer: ScaleCodecWriter, instance: SignatureCheckCondition): Unit {
        writer.directWrite(this.discriminant())
        SignatureCheckCondition.write(writer, instance.signatureCheckCondition)
      }
    }
  }

  /**
   * 'TransactionValue' variant
   */
  public class TransactionValue(
    private val transactionValue:
        jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue
  ) : Value() {
    public override fun discriminant(): Int = 9

    public companion object CODEC : ScaleReader<TransactionValue>, ScaleWriter<TransactionValue> {
      public override fun read(reader: ScaleCodecReader): TransactionValue {
      }

      public override fun write(writer: ScaleCodecWriter, instance: TransactionValue): Unit {
        writer.directWrite(this.discriminant())
        TransactionValue.write(writer, instance.transactionValue)
      }
    }
  }

  /**
   * 'PermissionToken' variant
   */
  public class PermissionToken(
    private val permissionToken:
        jp.co.soramitsu.schema.generated.datamodel.permissions.PermissionToken
  ) : Value() {
    public override fun discriminant(): Int = 10

    public companion object CODEC : ScaleReader<PermissionToken>, ScaleWriter<PermissionToken> {
      public override fun read(reader: ScaleCodecReader): PermissionToken {
      }

      public override fun write(writer: ScaleCodecWriter, instance: PermissionToken): Unit {
        writer.directWrite(this.discriminant())
        PermissionToken.write(writer, instance.permissionToken)
      }
    }
  }
}
