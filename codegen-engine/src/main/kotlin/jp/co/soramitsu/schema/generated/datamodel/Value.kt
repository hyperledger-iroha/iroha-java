// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Boolean
import kotlin.Int
import kotlin.Unit
import kotlin.collections.List

/**
 * Value
 *
 * Generated from 'iroha_data_model::Value' enum
 */
public abstract class Value {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'U32' variant
   */
  public class U32(
    private val u32: Int
  ) : Value(), ScaleReader<U32>, ScaleWriter<U32> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): U32 = U32(u32.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: U32): Unit {
      writer.directWrite(this.discriminant());
      u32.write(writer, instance.u32)
    }
  }

  /**
   * 'Bool' variant
   */
  public class Bool(
    private val bool: Boolean
  ) : Value(), ScaleReader<Bool>, ScaleWriter<Bool> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): Bool = Bool(bool.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Bool): Unit {
      writer.directWrite(this.discriminant());
      bool.write(writer, instance.bool)
    }
  }

  /**
   * 'String' variant
   */
  public class String(
    private val string: kotlin.String
  ) : Value(), ScaleReader<String>, ScaleWriter<String> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): String = String(string.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: String): Unit {
      writer.directWrite(this.discriminant());
      string.write(writer, instance.string)
    }
  }

  /**
   * 'Vec' variant
   */
  public class Vec(
    private val vec: List<Value>
  ) : Value(), ScaleReader<Vec>, ScaleWriter<Vec> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): Vec = Vec(vec.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Vec): Unit {
      writer.directWrite(this.discriminant());
      vec.write(writer, instance.vec)
    }
  }

  /**
   * 'Id' variant
   */
  public class Id(
    private val id: IdBox
  ) : Value(), ScaleReader<Id>, ScaleWriter<Id> {
    public override fun discriminant(): Int = 4

    public override fun read(reader: ScaleCodecReader): Id = Id(id.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Id): Unit {
      writer.directWrite(this.discriminant());
      id.write(writer, instance.id)
    }
  }

  /**
   * 'Identifiable' variant
   */
  public class Identifiable(
    private val identifiable: IdentifiableBox
  ) : Value(), ScaleReader<Identifiable>, ScaleWriter<Identifiable> {
    public override fun discriminant(): Int = 5

    public override fun read(reader: ScaleCodecReader): Identifiable =
        Identifiable(identifiable.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Identifiable): Unit {
      writer.directWrite(this.discriminant());
      identifiable.write(writer, instance.identifiable)
    }
  }

  /**
   * 'PublicKey' variant
   */
  public class PublicKey(
    private val publicKey: jp.co.soramitsu.schema.generated.crypto.PublicKey
  ) : Value(), ScaleReader<PublicKey>, ScaleWriter<PublicKey> {
    public override fun discriminant(): Int = 6

    public override fun read(reader: ScaleCodecReader): PublicKey =
        PublicKey(publicKey.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: PublicKey): Unit {
      writer.directWrite(this.discriminant());
      publicKey.write(writer, instance.publicKey)
    }
  }

  /**
   * 'Parameter' variant
   */
  public class Parameter(
    private val parameter: jp.co.soramitsu.schema.generated.datamodel.Parameter
  ) : Value(), ScaleReader<Parameter>, ScaleWriter<Parameter> {
    public override fun discriminant(): Int = 7

    public override fun read(reader: ScaleCodecReader): Parameter =
        Parameter(parameter.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Parameter): Unit {
      writer.directWrite(this.discriminant());
      parameter.write(writer, instance.parameter)
    }
  }

  /**
   * 'SignatureCheckCondition' variant
   */
  public class SignatureCheckCondition(
    private val signatureCheckCondition:
        jp.co.soramitsu.schema.generated.datamodel.account.SignatureCheckCondition
  ) : Value(), ScaleReader<SignatureCheckCondition>, ScaleWriter<SignatureCheckCondition> {
    public override fun discriminant(): Int = 8

    public override fun read(reader: ScaleCodecReader): SignatureCheckCondition =
        SignatureCheckCondition(signatureCheckCondition.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: SignatureCheckCondition): Unit {
      writer.directWrite(this.discriminant());
      signatureCheckCondition.write(writer, instance.signatureCheckCondition)
    }
  }

  /**
   * 'TransactionValue' variant
   */
  public class TransactionValue(
    private val transactionValue:
        jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue
  ) : Value(), ScaleReader<TransactionValue>, ScaleWriter<TransactionValue> {
    public override fun discriminant(): Int = 9

    public override fun read(reader: ScaleCodecReader): TransactionValue =
        TransactionValue(transactionValue.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: TransactionValue): Unit {
      writer.directWrite(this.discriminant());
      transactionValue.write(writer, instance.transactionValue)
    }
  }

  /**
   * 'PermissionToken' variant
   */
  public class PermissionToken(
    private val permissionToken:
        jp.co.soramitsu.schema.generated.datamodel.permissions.PermissionToken
  ) : Value(), ScaleReader<PermissionToken>, ScaleWriter<PermissionToken> {
    public override fun discriminant(): Int = 10

    public override fun read(reader: ScaleCodecReader): PermissionToken =
        PermissionToken(permissionToken.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: PermissionToken): Unit {
      writer.directWrite(this.discriminant());
      permissionToken.write(writer, instance.permissionToken)
    }
  }
}
