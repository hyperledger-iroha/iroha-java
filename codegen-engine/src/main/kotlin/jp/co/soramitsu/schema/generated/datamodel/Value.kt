// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Boolean
import kotlin.Int
import kotlin.Unit
import kotlin.collections.List

/**
 * Value
 *
 * Generated from 'iroha_data_model::Value' enum
 */
public abstract class Value {
  /**
   * 'U32' variant
   */
  public class U32(
    private val u32: Int
  ) : Value(), ScaleReader<U32>, ScaleWriter<U32> {
    public override fun read(reader: ScaleCodecReader): U32 {
    }

    public override fun write(writer: ScaleCodecWriter, instance: U32): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 0
    }
  }

  /**
   * 'Bool' variant
   */
  public class Bool(
    private val bool: Boolean
  ) : Value(), ScaleReader<Bool>, ScaleWriter<Bool> {
    public override fun read(reader: ScaleCodecReader): Bool {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Bool): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 1
    }
  }

  /**
   * 'String' variant
   */
  public class String(
    private val string: kotlin.String
  ) : Value(), ScaleReader<String>, ScaleWriter<String> {
    public override fun read(reader: ScaleCodecReader): String {
    }

    public override fun write(writer: ScaleCodecWriter, instance: String): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 2
    }
  }

  /**
   * 'Vec' variant
   */
  public class Vec(
    private val vec: List<Value>
  ) : Value(), ScaleReader<Vec>, ScaleWriter<Vec> {
    public override fun read(reader: ScaleCodecReader): Vec {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Vec): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 3
    }
  }

  /**
   * 'Id' variant
   */
  public class Id(
    private val id: IdBox
  ) : Value(), ScaleReader<Id>, ScaleWriter<Id> {
    public override fun read(reader: ScaleCodecReader): Id {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Id): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 4
    }
  }

  /**
   * 'Identifiable' variant
   */
  public class Identifiable(
    private val identifiable: IdentifiableBox
  ) : Value(), ScaleReader<Identifiable>, ScaleWriter<Identifiable> {
    public override fun read(reader: ScaleCodecReader): Identifiable {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Identifiable): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 5
    }
  }

  /**
   * 'PublicKey' variant
   */
  public class PublicKey(
    private val publicKey: jp.co.soramitsu.schema.generated.crypto.PublicKey
  ) : Value(), ScaleReader<PublicKey>, ScaleWriter<PublicKey> {
    public override fun read(reader: ScaleCodecReader): PublicKey {
    }

    public override fun write(writer: ScaleCodecWriter, instance: PublicKey): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 6
    }
  }

  /**
   * 'Parameter' variant
   */
  public class Parameter(
    private val parameter: jp.co.soramitsu.schema.generated.datamodel.Parameter
  ) : Value(), ScaleReader<Parameter>, ScaleWriter<Parameter> {
    public override fun read(reader: ScaleCodecReader): Parameter {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Parameter): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 7
    }
  }

  /**
   * 'SignatureCheckCondition' variant
   */
  public class SignatureCheckCondition(
    private val signatureCheckCondition:
        jp.co.soramitsu.schema.generated.datamodel.account.SignatureCheckCondition
  ) : Value(), ScaleReader<SignatureCheckCondition>, ScaleWriter<SignatureCheckCondition> {
    public override fun read(reader: ScaleCodecReader): SignatureCheckCondition {
    }

    public override fun write(writer: ScaleCodecWriter, instance: SignatureCheckCondition): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 8
    }
  }

  /**
   * 'TransactionValue' variant
   */
  public class TransactionValue(
    private val transactionValue:
        jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue
  ) : Value(), ScaleReader<TransactionValue>, ScaleWriter<TransactionValue> {
    public override fun read(reader: ScaleCodecReader): TransactionValue {
    }

    public override fun write(writer: ScaleCodecWriter, instance: TransactionValue): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 9
    }
  }

  /**
   * 'PermissionToken' variant
   */
  public class PermissionToken(
    private val permissionToken:
        jp.co.soramitsu.schema.generated.datamodel.permissions.PermissionToken
  ) : Value(), ScaleReader<PermissionToken>, ScaleWriter<PermissionToken> {
    public override fun read(reader: ScaleCodecReader): PermissionToken {
    }

    public override fun write(writer: ScaleCodecWriter, instance: PermissionToken): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 10
    }
  }
}
