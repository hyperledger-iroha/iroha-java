// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleReader
import kotlin.Boolean
import kotlin.Int
import kotlin.collections.List

/**
 * Value
 *
 * Generated from 'iroha_data_model::Value' enum
 */
public abstract class Value {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'U32' variant
   */
  public class U32(
    private val u32: Int
  ) : Value() {
    public override fun discriminant(): Int = 0

    public companion object READER : ScaleReader<U32> {
      public override fun read(reader: ScaleCodecReader): U32 {
      }
    }
  }

  /**
   * 'Bool' variant
   */
  public class Bool(
    private val bool: Boolean
  ) : Value() {
    public override fun discriminant(): Int = 1

    public companion object READER : ScaleReader<Bool> {
      public override fun read(reader: ScaleCodecReader): Bool {
      }
    }
  }

  /**
   * 'String' variant
   */
  public class String(
    private val string: kotlin.String
  ) : Value() {
    public override fun discriminant(): Int = 2

    public companion object READER : ScaleReader<String> {
      public override fun read(reader: ScaleCodecReader): String {
      }
    }
  }

  /**
   * 'Vec' variant
   */
  public class Vec(
    private val vec: List<Value>
  ) : Value() {
    public override fun discriminant(): Int = 3

    public companion object READER : ScaleReader<Vec> {
      public override fun read(reader: ScaleCodecReader): Vec {
      }
    }
  }

  /**
   * 'Id' variant
   */
  public class Id(
    private val id: IdBox
  ) : Value() {
    public override fun discriminant(): Int = 4

    public companion object READER : ScaleReader<Id> {
      public override fun read(reader: ScaleCodecReader): Id {
      }
    }
  }

  /**
   * 'Identifiable' variant
   */
  public class Identifiable(
    private val identifiable: IdentifiableBox
  ) : Value() {
    public override fun discriminant(): Int = 5

    public companion object READER : ScaleReader<Identifiable> {
      public override fun read(reader: ScaleCodecReader): Identifiable {
      }
    }
  }

  /**
   * 'PublicKey' variant
   */
  public class PublicKey(
    private val publicKey: jp.co.soramitsu.schema.generated.crypto.PublicKey
  ) : Value() {
    public override fun discriminant(): Int = 6

    public companion object READER : ScaleReader<PublicKey> {
      public override fun read(reader: ScaleCodecReader): PublicKey {
      }
    }
  }

  /**
   * 'Parameter' variant
   */
  public class Parameter(
    private val parameter: jp.co.soramitsu.schema.generated.datamodel.Parameter
  ) : Value() {
    public override fun discriminant(): Int = 7

    public companion object READER : ScaleReader<Parameter> {
      public override fun read(reader: ScaleCodecReader): Parameter {
      }
    }
  }

  /**
   * 'SignatureCheckCondition' variant
   */
  public class SignatureCheckCondition(
    private val signatureCheckCondition:
        jp.co.soramitsu.schema.generated.datamodel.account.SignatureCheckCondition
  ) : Value() {
    public override fun discriminant(): Int = 8

    public companion object READER : ScaleReader<SignatureCheckCondition> {
      public override fun read(reader: ScaleCodecReader): SignatureCheckCondition {
      }
    }
  }

  /**
   * 'TransactionValue' variant
   */
  public class TransactionValue(
    private val transactionValue:
        jp.co.soramitsu.schema.generated.datamodel.transaction.TransactionValue
  ) : Value() {
    public override fun discriminant(): Int = 9

    public companion object READER : ScaleReader<TransactionValue> {
      public override fun read(reader: ScaleCodecReader): TransactionValue {
      }
    }
  }

  /**
   * 'PermissionToken' variant
   */
  public class PermissionToken(
    private val permissionToken:
        jp.co.soramitsu.schema.generated.datamodel.permissions.PermissionToken
  ) : Value() {
    public override fun discriminant(): Int = 10

    public companion object READER : ScaleReader<PermissionToken> {
      public override fun read(reader: ScaleCodecReader): PermissionToken {
      }
    }
  }
}
