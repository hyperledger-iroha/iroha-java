// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.domain

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.generated.datamodel.account.Account
import jp.co.soramitsu.schema.generated.datamodel.account.Id
import jp.co.soramitsu.schema.generated.datamodel.asset.AssetDefinitionEntry
import jp.co.soramitsu.schema.generated.datamodel.asset.DefinitionId
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map

/**
 * Domain
 *
 * Generated from 'iroha_data_model::domain::Domain' regular structure
 */
public class Domain(
  private val name: String,
  private val accounts: Map<Id, Account>,
  private val assetDefinitions: Map<DefinitionId, AssetDefinitionEntry>
) {
  public companion object : ScaleReader<Domain>, ScaleWriter<Domain> {
    public override fun read(reader: ScaleCodecReader): Domain = Domain(reader.readString(),
        reader.read(jp.co.soramitsu.schema.codegen.MapReader(jp.co.soramitsu.schema.generated.datamodel.account.Id,
        jp.co.soramitsu.schema.generated.datamodel.account.Account)),
        reader.read(jp.co.soramitsu.schema.codegen.MapReader(jp.co.soramitsu.schema.generated.datamodel.asset.DefinitionId,
        jp.co.soramitsu.schema.generated.datamodel.asset.AssetDefinitionEntry)))

    public override fun write(writer: ScaleCodecWriter, instance: Domain): Unit {
      writer.writeString(instance.`name`)
      writer.write(jp.co.soramitsu.schema.codegen.MapWriter(jp.co.soramitsu.schema.generated.datamodel.account.Id,
          jp.co.soramitsu.schema.generated.datamodel.account.Account), instance.`accounts`)
      writer.write(jp.co.soramitsu.schema.codegen.MapWriter(jp.co.soramitsu.schema.generated.datamodel.asset.DefinitionId,
          jp.co.soramitsu.schema.generated.datamodel.asset.AssetDefinitionEntry),
          instance.`assetDefinitions`)
    }
  }
}
