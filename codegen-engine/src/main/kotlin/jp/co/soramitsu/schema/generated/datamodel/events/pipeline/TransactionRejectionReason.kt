// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.events.pipeline

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * TransactionRejectionReason
 *
 * Generated from 'iroha_data_model::events::pipeline::TransactionRejectionReason' enum
 */
public abstract class TransactionRejectionReason {
  /**
   * 'NotPermitted' variant
   */
  public class NotPermitted(
    private val notPermitted: NotPermittedFail
  ) : TransactionRejectionReason(), ScaleReader<NotPermitted>, ScaleWriter<NotPermitted> {
    public override fun read(reader: ScaleCodecReader): NotPermitted {
    }

    public override fun write(writer: ScaleCodecWriter, instance: NotPermitted): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 0
    }
  }

  /**
   * 'UnsatisfiedSignatureCondition' variant
   */
  public class UnsatisfiedSignatureCondition(
    private val unsatisfiedSignatureCondition: UnsatisfiedSignatureConditionFail
  ) : TransactionRejectionReason(), ScaleReader<UnsatisfiedSignatureCondition>,
      ScaleWriter<UnsatisfiedSignatureCondition> {
    public override fun read(reader: ScaleCodecReader): UnsatisfiedSignatureCondition {
    }

    public override fun write(writer: ScaleCodecWriter, instance: UnsatisfiedSignatureCondition):
        Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 1
    }
  }

  /**
   * 'InstructionExecution' variant
   */
  public class InstructionExecution(
    private val instructionExecution: InstructionExecutionFail
  ) : TransactionRejectionReason(), ScaleReader<InstructionExecution>,
      ScaleWriter<InstructionExecution> {
    public override fun read(reader: ScaleCodecReader): InstructionExecution {
    }

    public override fun write(writer: ScaleCodecWriter, instance: InstructionExecution): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 2
    }
  }

  /**
   * 'SignatureVerification' variant
   */
  public class SignatureVerification(
    private val signatureVerification: SignatureVerificationFail
  ) : TransactionRejectionReason(), ScaleReader<SignatureVerification>,
      ScaleWriter<SignatureVerification> {
    public override fun read(reader: ScaleCodecReader): SignatureVerification {
    }

    public override fun write(writer: ScaleCodecWriter, instance: SignatureVerification): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 3
    }
  }

  /**
   * 'UnexpectedGenesisAccountSignature' variant
   */
  public class UnexpectedGenesisAccountSignature : TransactionRejectionReason(),
      ScaleReader<UnexpectedGenesisAccountSignature>, ScaleWriter<UnexpectedGenesisAccountSignature>
      {
    public override fun read(reader: ScaleCodecReader): UnexpectedGenesisAccountSignature {
    }

    public override fun write(writer: ScaleCodecWriter,
        instance: UnexpectedGenesisAccountSignature): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 4
    }
  }
}
