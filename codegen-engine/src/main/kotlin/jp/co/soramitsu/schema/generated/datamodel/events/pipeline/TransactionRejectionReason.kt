// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.events.pipeline

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * TransactionRejectionReason
 *
 * Generated from 'iroha_data_model::events::pipeline::TransactionRejectionReason' enum
 */
public sealed class TransactionRejectionReason {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'NotPermitted' variant
   */
  public class NotPermitted(
    private val notPermitted: NotPermittedFail
  ) : TransactionRejectionReason() {
    public override fun discriminant(): Int = 0

    public companion object : ScaleReader<NotPermitted>, ScaleWriter<NotPermitted> {
      public override fun read(reader: ScaleCodecReader): NotPermitted =
          jp.co.soramitsu.schema.generated.datamodel.events.pipeline.TransactionRejectionReason.NotPermitted(jp.co.soramitsu.schema.generated.datamodel.events.pipeline.NotPermittedFail.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: NotPermitted): Unit {
        jp.co.soramitsu.schema.generated.datamodel.events.pipeline.NotPermittedFail.write(writer,
            instance.`notPermitted`)
      }
    }
  }

  /**
   * 'UnsatisfiedSignatureCondition' variant
   */
  public class UnsatisfiedSignatureCondition(
    private val unsatisfiedSignatureCondition: UnsatisfiedSignatureConditionFail
  ) : TransactionRejectionReason() {
    public override fun discriminant(): Int = 1

    public companion object : ScaleReader<UnsatisfiedSignatureCondition>,
        ScaleWriter<UnsatisfiedSignatureCondition> {
      public override fun read(reader: ScaleCodecReader): UnsatisfiedSignatureCondition =
          jp.co.soramitsu.schema.generated.datamodel.events.pipeline.TransactionRejectionReason.UnsatisfiedSignatureCondition(jp.co.soramitsu.schema.generated.datamodel.events.pipeline.UnsatisfiedSignatureConditionFail.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: UnsatisfiedSignatureCondition):
          Unit {
        jp.co.soramitsu.schema.generated.datamodel.events.pipeline.UnsatisfiedSignatureConditionFail.write(writer,
            instance.`unsatisfiedSignatureCondition`)
      }
    }
  }

  /**
   * 'InstructionExecution' variant
   */
  public class InstructionExecution(
    private val instructionExecution: InstructionExecutionFail
  ) : TransactionRejectionReason() {
    public override fun discriminant(): Int = 2

    public companion object : ScaleReader<InstructionExecution>, ScaleWriter<InstructionExecution> {
      public override fun read(reader: ScaleCodecReader): InstructionExecution =
          jp.co.soramitsu.schema.generated.datamodel.events.pipeline.TransactionRejectionReason.InstructionExecution(jp.co.soramitsu.schema.generated.datamodel.events.pipeline.InstructionExecutionFail.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: InstructionExecution): Unit {
        jp.co.soramitsu.schema.generated.datamodel.events.pipeline.InstructionExecutionFail.write(writer,
            instance.`instructionExecution`)
      }
    }
  }

  /**
   * 'SignatureVerification' variant
   */
  public class SignatureVerification(
    private val signatureVerification: SignatureVerificationFail
  ) : TransactionRejectionReason() {
    public override fun discriminant(): Int = 3

    public companion object : ScaleReader<SignatureVerification>, ScaleWriter<SignatureVerification>
        {
      public override fun read(reader: ScaleCodecReader): SignatureVerification =
          jp.co.soramitsu.schema.generated.datamodel.events.pipeline.TransactionRejectionReason.SignatureVerification(jp.co.soramitsu.schema.generated.datamodel.events.pipeline.SignatureVerificationFail.read(reader))

      public override fun write(writer: ScaleCodecWriter, instance: SignatureVerification): Unit {
        jp.co.soramitsu.schema.generated.datamodel.events.pipeline.SignatureVerificationFail.write(writer,
            instance.`signatureVerification`)
      }
    }
  }

  /**
   * 'UnexpectedGenesisAccountSignature' variant
   */
  public class UnexpectedGenesisAccountSignature : TransactionRejectionReason() {
    public override fun discriminant(): Int = 4

    public companion object : ScaleReader<UnexpectedGenesisAccountSignature>,
        ScaleWriter<UnexpectedGenesisAccountSignature> {
      public override fun read(reader: ScaleCodecReader): UnexpectedGenesisAccountSignature =
          jp.co.soramitsu.schema.generated.datamodel.events.pipeline.TransactionRejectionReason.UnexpectedGenesisAccountSignature()

      public override fun write(writer: ScaleCodecWriter,
          instance: UnexpectedGenesisAccountSignature): Unit {
        //nothing to write, enum variant do not have properties
      }
    }
  }

  public companion object : ScaleReader<TransactionRejectionReason>,
      ScaleWriter<TransactionRejectionReason> {
    public override fun read(reader: ScaleCodecReader): TransactionRejectionReason =
        when(reader.readUByte()) {
    	0 -> NotPermitted.read(reader)
    	1 -> UnsatisfiedSignatureCondition.read(reader)
    	2 -> InstructionExecution.read(reader)
    	3 -> SignatureVerification.read(reader)
    	4 -> UnexpectedGenesisAccountSignature.read(reader)
    	else -> throw RuntimeException("Unresolved discriminant of the enum variant")
    }

    public override fun write(writer: ScaleCodecWriter, instance: TransactionRejectionReason):
        Unit {
      writer.directWrite(instance.discriminant())
      when(instance.discriminant()) {
      	0 -> NotPermitted.write(writer, instance as NotPermitted)
      	1 -> UnsatisfiedSignatureCondition.write(writer, instance as UnsatisfiedSignatureCondition)
      	2 -> InstructionExecution.write(writer, instance as InstructionExecution)
      	3 -> SignatureVerification.write(writer, instance as SignatureVerification)
      	4 -> UnexpectedGenesisAccountSignature.write(writer, instance as
          UnexpectedGenesisAccountSignature)
      	else -> throw RuntimeException("Unresolved discriminant of the enum variant")
      }
    }
  }
}
