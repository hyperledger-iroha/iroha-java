// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.events.pipeline

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * TransactionRejectionReason
 *
 * Generated from 'iroha_data_model::events::pipeline::TransactionRejectionReason' enum
 */
public abstract class TransactionRejectionReason {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'NotPermitted' variant
   */
  public class NotPermitted(
    private val notPermitted: NotPermittedFail
  ) : TransactionRejectionReason(), ScaleReader<NotPermitted>, ScaleWriter<NotPermitted> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): NotPermitted =
        NotPermitted(notPermitted.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: NotPermitted): Unit {
      writer.directWrite(this.discriminant());
      notPermitted.write(writer, instance.notPermitted)
    }
  }

  /**
   * 'UnsatisfiedSignatureCondition' variant
   */
  public class UnsatisfiedSignatureCondition(
    private val unsatisfiedSignatureCondition: UnsatisfiedSignatureConditionFail
  ) : TransactionRejectionReason(), ScaleReader<UnsatisfiedSignatureCondition>,
      ScaleWriter<UnsatisfiedSignatureCondition> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): UnsatisfiedSignatureCondition =
        UnsatisfiedSignatureCondition(unsatisfiedSignatureCondition.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: UnsatisfiedSignatureCondition):
        Unit {
      writer.directWrite(this.discriminant());
      unsatisfiedSignatureCondition.write(writer, instance.unsatisfiedSignatureCondition)
    }
  }

  /**
   * 'InstructionExecution' variant
   */
  public class InstructionExecution(
    private val instructionExecution: InstructionExecutionFail
  ) : TransactionRejectionReason(), ScaleReader<InstructionExecution>,
      ScaleWriter<InstructionExecution> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): InstructionExecution =
        InstructionExecution(instructionExecution.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: InstructionExecution): Unit {
      writer.directWrite(this.discriminant());
      instructionExecution.write(writer, instance.instructionExecution)
    }
  }

  /**
   * 'SignatureVerification' variant
   */
  public class SignatureVerification(
    private val signatureVerification: SignatureVerificationFail
  ) : TransactionRejectionReason(), ScaleReader<SignatureVerification>,
      ScaleWriter<SignatureVerification> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): SignatureVerification =
        SignatureVerification(signatureVerification.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: SignatureVerification): Unit {
      writer.directWrite(this.discriminant());
      signatureVerification.write(writer, instance.signatureVerification)
    }
  }

  /**
   * 'UnexpectedGenesisAccountSignature' variant
   */
  public class UnexpectedGenesisAccountSignature : TransactionRejectionReason() {
    public override fun discriminant(): Int = 4
  }
}
