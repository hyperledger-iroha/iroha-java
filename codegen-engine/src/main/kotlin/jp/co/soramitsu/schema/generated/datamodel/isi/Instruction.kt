// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.isi

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import jp.co.soramitsu.schema.codegen.read
import jp.co.soramitsu.schema.codegen.write
import kotlin.Int
import kotlin.Unit

/**
 * Instruction
 *
 * Generated from 'iroha_data_model::isi::Instruction' enum
 */
public abstract class Instruction {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Register' variant
   */
  public class Register(
    private val register: RegisterBox
  ) : Instruction(), ScaleReader<Register>, ScaleWriter<Register> {
    public override fun discriminant(): Int = 0

    public override fun read(reader: ScaleCodecReader): Register = Register(register.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Register): Unit {
      writer.directWrite(this.discriminant());
      register.write(writer, instance.register))
    }
  }

  /**
   * 'Unregister' variant
   */
  public class Unregister(
    private val unregister: UnregisterBox
  ) : Instruction(), ScaleReader<Unregister>, ScaleWriter<Unregister> {
    public override fun discriminant(): Int = 1

    public override fun read(reader: ScaleCodecReader): Unregister =
        Unregister(unregister.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Unregister): Unit {
      writer.directWrite(this.discriminant());
      unregister.write(writer, instance.unregister))
    }
  }

  /**
   * 'Mint' variant
   */
  public class Mint(
    private val mint: MintBox
  ) : Instruction(), ScaleReader<Mint>, ScaleWriter<Mint> {
    public override fun discriminant(): Int = 2

    public override fun read(reader: ScaleCodecReader): Mint = Mint(mint.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Mint): Unit {
      writer.directWrite(this.discriminant());
      mint.write(writer, instance.mint))
    }
  }

  /**
   * 'Burn' variant
   */
  public class Burn(
    private val burn: BurnBox
  ) : Instruction(), ScaleReader<Burn>, ScaleWriter<Burn> {
    public override fun discriminant(): Int = 3

    public override fun read(reader: ScaleCodecReader): Burn = Burn(burn.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Burn): Unit {
      writer.directWrite(this.discriminant());
      burn.write(writer, instance.burn))
    }
  }

  /**
   * 'Transfer' variant
   */
  public class Transfer(
    private val transfer: TransferBox
  ) : Instruction(), ScaleReader<Transfer>, ScaleWriter<Transfer> {
    public override fun discriminant(): Int = 4

    public override fun read(reader: ScaleCodecReader): Transfer = Transfer(transfer.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Transfer): Unit {
      writer.directWrite(this.discriminant());
      transfer.write(writer, instance.transfer))
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.isi.If
  ) : Instruction(), ScaleReader<If>, ScaleWriter<If> {
    public override fun discriminant(): Int = 5

    public override fun read(reader: ScaleCodecReader): If = If(if.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: If): Unit {
      writer.directWrite(this.discriminant());
      if.write(writer, instance.if))
    }
  }

  /**
   * 'Pair' variant
   */
  public class Pair(
    private val pair: jp.co.soramitsu.schema.generated.datamodel.isi.Pair
  ) : Instruction(), ScaleReader<Pair>, ScaleWriter<Pair> {
    public override fun discriminant(): Int = 6

    public override fun read(reader: ScaleCodecReader): Pair = Pair(pair.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Pair): Unit {
      writer.directWrite(this.discriminant());
      pair.write(writer, instance.pair))
    }
  }

  /**
   * 'Sequence' variant
   */
  public class Sequence(
    private val sequence: SequenceBox
  ) : Instruction(), ScaleReader<Sequence>, ScaleWriter<Sequence> {
    public override fun discriminant(): Int = 7

    public override fun read(reader: ScaleCodecReader): Sequence = Sequence(sequence.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Sequence): Unit {
      writer.directWrite(this.discriminant());
      sequence.write(writer, instance.sequence))
    }
  }

  /**
   * 'Fail' variant
   */
  public class Fail(
    private val fail: FailBox
  ) : Instruction(), ScaleReader<Fail>, ScaleWriter<Fail> {
    public override fun discriminant(): Int = 8

    public override fun read(reader: ScaleCodecReader): Fail = Fail(fail.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Fail): Unit {
      writer.directWrite(this.discriminant());
      fail.write(writer, instance.fail))
    }
  }

  /**
   * 'SetKeyValue' variant
   */
  public class SetKeyValue(
    private val setKeyValue: SetKeyValueBox
  ) : Instruction(), ScaleReader<SetKeyValue>, ScaleWriter<SetKeyValue> {
    public override fun discriminant(): Int = 9

    public override fun read(reader: ScaleCodecReader): SetKeyValue =
        SetKeyValue(setKeyValue.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: SetKeyValue): Unit {
      writer.directWrite(this.discriminant());
      setKeyValue.write(writer, instance.setKeyValue))
    }
  }

  /**
   * 'RemoveKeyValue' variant
   */
  public class RemoveKeyValue(
    private val removeKeyValue: RemoveKeyValueBox
  ) : Instruction(), ScaleReader<RemoveKeyValue>, ScaleWriter<RemoveKeyValue> {
    public override fun discriminant(): Int = 10

    public override fun read(reader: ScaleCodecReader): RemoveKeyValue =
        RemoveKeyValue(removeKeyValue.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: RemoveKeyValue): Unit {
      writer.directWrite(this.discriminant());
      removeKeyValue.write(writer, instance.removeKeyValue))
    }
  }

  /**
   * 'Grant' variant
   */
  public class Grant(
    private val grant: GrantBox
  ) : Instruction(), ScaleReader<Grant>, ScaleWriter<Grant> {
    public override fun discriminant(): Int = 11

    public override fun read(reader: ScaleCodecReader): Grant = Grant(grant.read(reader))

    public override fun write(writer: ScaleCodecWriter, instance: Grant): Unit {
      writer.directWrite(this.discriminant());
      grant.write(writer, instance.grant))
    }
  }
}
