// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.isi

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleReader
import kotlin.Int

/**
 * Instruction
 *
 * Generated from 'iroha_data_model::isi::Instruction' enum
 */
public abstract class Instruction {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Register' variant
   */
  public class Register(
    private val register: RegisterBox
  ) : Instruction() {
    public override fun discriminant(): Int = 0

    public companion object READER : ScaleReader<Register> {
      public override fun read(reader: ScaleCodecReader): Register {
      }
    }
  }

  /**
   * 'Unregister' variant
   */
  public class Unregister(
    private val unregister: UnregisterBox
  ) : Instruction() {
    public override fun discriminant(): Int = 1

    public companion object READER : ScaleReader<Unregister> {
      public override fun read(reader: ScaleCodecReader): Unregister {
      }
    }
  }

  /**
   * 'Mint' variant
   */
  public class Mint(
    private val mint: MintBox
  ) : Instruction() {
    public override fun discriminant(): Int = 2

    public companion object READER : ScaleReader<Mint> {
      public override fun read(reader: ScaleCodecReader): Mint {
      }
    }
  }

  /**
   * 'Burn' variant
   */
  public class Burn(
    private val burn: BurnBox
  ) : Instruction() {
    public override fun discriminant(): Int = 3

    public companion object READER : ScaleReader<Burn> {
      public override fun read(reader: ScaleCodecReader): Burn {
      }
    }
  }

  /**
   * 'Transfer' variant
   */
  public class Transfer(
    private val transfer: TransferBox
  ) : Instruction() {
    public override fun discriminant(): Int = 4

    public companion object READER : ScaleReader<Transfer> {
      public override fun read(reader: ScaleCodecReader): Transfer {
      }
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.isi.If
  ) : Instruction() {
    public override fun discriminant(): Int = 5

    public companion object READER : ScaleReader<If> {
      public override fun read(reader: ScaleCodecReader): If {
      }
    }
  }

  /**
   * 'Pair' variant
   */
  public class Pair(
    private val pair: jp.co.soramitsu.schema.generated.datamodel.isi.Pair
  ) : Instruction() {
    public override fun discriminant(): Int = 6

    public companion object READER : ScaleReader<Pair> {
      public override fun read(reader: ScaleCodecReader): Pair {
      }
    }
  }

  /**
   * 'Sequence' variant
   */
  public class Sequence(
    private val sequence: SequenceBox
  ) : Instruction() {
    public override fun discriminant(): Int = 7

    public companion object READER : ScaleReader<Sequence> {
      public override fun read(reader: ScaleCodecReader): Sequence {
      }
    }
  }

  /**
   * 'Fail' variant
   */
  public class Fail(
    private val fail: FailBox
  ) : Instruction() {
    public override fun discriminant(): Int = 8

    public companion object READER : ScaleReader<Fail> {
      public override fun read(reader: ScaleCodecReader): Fail {
      }
    }
  }

  /**
   * 'SetKeyValue' variant
   */
  public class SetKeyValue(
    private val setKeyValue: SetKeyValueBox
  ) : Instruction() {
    public override fun discriminant(): Int = 9

    public companion object READER : ScaleReader<SetKeyValue> {
      public override fun read(reader: ScaleCodecReader): SetKeyValue {
      }
    }
  }

  /**
   * 'RemoveKeyValue' variant
   */
  public class RemoveKeyValue(
    private val removeKeyValue: RemoveKeyValueBox
  ) : Instruction() {
    public override fun discriminant(): Int = 10

    public companion object READER : ScaleReader<RemoveKeyValue> {
      public override fun read(reader: ScaleCodecReader): RemoveKeyValue {
      }
    }
  }

  /**
   * 'Grant' variant
   */
  public class Grant(
    private val grant: GrantBox
  ) : Instruction() {
    public override fun discriminant(): Int = 11

    public companion object READER : ScaleReader<Grant> {
      public override fun read(reader: ScaleCodecReader): Grant {
      }
    }
  }
}
