// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.isi

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * Instruction
 *
 * Generated from 'iroha_data_model::isi::Instruction' enum
 */
public abstract class Instruction {
  /**
   * @return Discriminator of variant in enum
   */
  public abstract fun discriminant(): Int

  /**
   * 'Register' variant
   */
  public class Register(
    private val register: RegisterBox
  ) : Instruction() {
    public override fun discriminant(): Int = 0

    public companion object CODEC : ScaleReader<Register>, ScaleWriter<Register> {
      public override fun read(reader: ScaleCodecReader): Register {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Register): Unit {
        writer.directWrite(this.discriminant())
        RegisterBox.write(writer, instance.register)
      }
    }
  }

  /**
   * 'Unregister' variant
   */
  public class Unregister(
    private val unregister: UnregisterBox
  ) : Instruction() {
    public override fun discriminant(): Int = 1

    public companion object CODEC : ScaleReader<Unregister>, ScaleWriter<Unregister> {
      public override fun read(reader: ScaleCodecReader): Unregister {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Unregister): Unit {
        writer.directWrite(this.discriminant())
        UnregisterBox.write(writer, instance.unregister)
      }
    }
  }

  /**
   * 'Mint' variant
   */
  public class Mint(
    private val mint: MintBox
  ) : Instruction() {
    public override fun discriminant(): Int = 2

    public companion object CODEC : ScaleReader<Mint>, ScaleWriter<Mint> {
      public override fun read(reader: ScaleCodecReader): Mint {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Mint): Unit {
        writer.directWrite(this.discriminant())
        MintBox.write(writer, instance.mint)
      }
    }
  }

  /**
   * 'Burn' variant
   */
  public class Burn(
    private val burn: BurnBox
  ) : Instruction() {
    public override fun discriminant(): Int = 3

    public companion object CODEC : ScaleReader<Burn>, ScaleWriter<Burn> {
      public override fun read(reader: ScaleCodecReader): Burn {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Burn): Unit {
        writer.directWrite(this.discriminant())
        BurnBox.write(writer, instance.burn)
      }
    }
  }

  /**
   * 'Transfer' variant
   */
  public class Transfer(
    private val transfer: TransferBox
  ) : Instruction() {
    public override fun discriminant(): Int = 4

    public companion object CODEC : ScaleReader<Transfer>, ScaleWriter<Transfer> {
      public override fun read(reader: ScaleCodecReader): Transfer {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Transfer): Unit {
        writer.directWrite(this.discriminant())
        TransferBox.write(writer, instance.transfer)
      }
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.isi.If
  ) : Instruction() {
    public override fun discriminant(): Int = 5

    public companion object CODEC : ScaleReader<If>, ScaleWriter<If> {
      public override fun read(reader: ScaleCodecReader): If {
      }

      public override fun write(writer: ScaleCodecWriter, instance: If): Unit {
        writer.directWrite(this.discriminant())
        If.write(writer, instance.if)
      }
    }
  }

  /**
   * 'Pair' variant
   */
  public class Pair(
    private val pair: jp.co.soramitsu.schema.generated.datamodel.isi.Pair
  ) : Instruction() {
    public override fun discriminant(): Int = 6

    public companion object CODEC : ScaleReader<Pair>, ScaleWriter<Pair> {
      public override fun read(reader: ScaleCodecReader): Pair {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Pair): Unit {
        writer.directWrite(this.discriminant())
        Pair.write(writer, instance.pair)
      }
    }
  }

  /**
   * 'Sequence' variant
   */
  public class Sequence(
    private val sequence: SequenceBox
  ) : Instruction() {
    public override fun discriminant(): Int = 7

    public companion object CODEC : ScaleReader<Sequence>, ScaleWriter<Sequence> {
      public override fun read(reader: ScaleCodecReader): Sequence {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Sequence): Unit {
        writer.directWrite(this.discriminant())
        SequenceBox.write(writer, instance.sequence)
      }
    }
  }

  /**
   * 'Fail' variant
   */
  public class Fail(
    private val fail: FailBox
  ) : Instruction() {
    public override fun discriminant(): Int = 8

    public companion object CODEC : ScaleReader<Fail>, ScaleWriter<Fail> {
      public override fun read(reader: ScaleCodecReader): Fail {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Fail): Unit {
        writer.directWrite(this.discriminant())
        FailBox.write(writer, instance.fail)
      }
    }
  }

  /**
   * 'SetKeyValue' variant
   */
  public class SetKeyValue(
    private val setKeyValue: SetKeyValueBox
  ) : Instruction() {
    public override fun discriminant(): Int = 9

    public companion object CODEC : ScaleReader<SetKeyValue>, ScaleWriter<SetKeyValue> {
      public override fun read(reader: ScaleCodecReader): SetKeyValue {
      }

      public override fun write(writer: ScaleCodecWriter, instance: SetKeyValue): Unit {
        writer.directWrite(this.discriminant())
        SetKeyValueBox.write(writer, instance.setKeyValue)
      }
    }
  }

  /**
   * 'RemoveKeyValue' variant
   */
  public class RemoveKeyValue(
    private val removeKeyValue: RemoveKeyValueBox
  ) : Instruction() {
    public override fun discriminant(): Int = 10

    public companion object CODEC : ScaleReader<RemoveKeyValue>, ScaleWriter<RemoveKeyValue> {
      public override fun read(reader: ScaleCodecReader): RemoveKeyValue {
      }

      public override fun write(writer: ScaleCodecWriter, instance: RemoveKeyValue): Unit {
        writer.directWrite(this.discriminant())
        RemoveKeyValueBox.write(writer, instance.removeKeyValue)
      }
    }
  }

  /**
   * 'Grant' variant
   */
  public class Grant(
    private val grant: GrantBox
  ) : Instruction() {
    public override fun discriminant(): Int = 11

    public companion object CODEC : ScaleReader<Grant>, ScaleWriter<Grant> {
      public override fun read(reader: ScaleCodecReader): Grant {
      }

      public override fun write(writer: ScaleCodecWriter, instance: Grant): Unit {
        writer.directWrite(this.discriminant())
        GrantBox.write(writer, instance.grant)
      }
    }
  }
}
