// Do not change. Autogenerated code
package jp.co.soramitsu.schema.generated.datamodel.isi

import io.emeraldpay.polkaj.scale.ScaleCodecReader
import io.emeraldpay.polkaj.scale.ScaleCodecWriter
import io.emeraldpay.polkaj.scale.ScaleReader
import io.emeraldpay.polkaj.scale.ScaleWriter
import kotlin.Int
import kotlin.Unit

/**
 * Instruction
 *
 * Generated from 'iroha_data_model::isi::Instruction' enum
 */
public abstract class Instruction {
  /**
   * 'Register' variant
   */
  public class Register(
    private val register: RegisterBox
  ) : Instruction(), ScaleReader<Register>, ScaleWriter<Register> {
    public override fun read(reader: ScaleCodecReader): Register {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Register): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 0
    }
  }

  /**
   * 'Unregister' variant
   */
  public class Unregister(
    private val unregister: UnregisterBox
  ) : Instruction(), ScaleReader<Unregister>, ScaleWriter<Unregister> {
    public override fun read(reader: ScaleCodecReader): Unregister {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Unregister): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 1
    }
  }

  /**
   * 'Mint' variant
   */
  public class Mint(
    private val mint: MintBox
  ) : Instruction(), ScaleReader<Mint>, ScaleWriter<Mint> {
    public override fun read(reader: ScaleCodecReader): Mint {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Mint): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 2
    }
  }

  /**
   * 'Burn' variant
   */
  public class Burn(
    private val burn: BurnBox
  ) : Instruction(), ScaleReader<Burn>, ScaleWriter<Burn> {
    public override fun read(reader: ScaleCodecReader): Burn {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Burn): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 3
    }
  }

  /**
   * 'Transfer' variant
   */
  public class Transfer(
    private val transfer: TransferBox
  ) : Instruction(), ScaleReader<Transfer>, ScaleWriter<Transfer> {
    public override fun read(reader: ScaleCodecReader): Transfer {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Transfer): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 4
    }
  }

  /**
   * 'If' variant
   */
  public class If(
    private val `if`: jp.co.soramitsu.schema.generated.datamodel.isi.If
  ) : Instruction(), ScaleReader<If>, ScaleWriter<If> {
    public override fun read(reader: ScaleCodecReader): If {
    }

    public override fun write(writer: ScaleCodecWriter, instance: If): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 5
    }
  }

  /**
   * 'Pair' variant
   */
  public class Pair(
    private val pair: jp.co.soramitsu.schema.generated.datamodel.isi.Pair
  ) : Instruction(), ScaleReader<Pair>, ScaleWriter<Pair> {
    public override fun read(reader: ScaleCodecReader): Pair {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Pair): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 6
    }
  }

  /**
   * 'Sequence' variant
   */
  public class Sequence(
    private val sequence: SequenceBox
  ) : Instruction(), ScaleReader<Sequence>, ScaleWriter<Sequence> {
    public override fun read(reader: ScaleCodecReader): Sequence {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Sequence): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 7
    }
  }

  /**
   * 'Fail' variant
   */
  public class Fail(
    private val fail: FailBox
  ) : Instruction(), ScaleReader<Fail>, ScaleWriter<Fail> {
    public override fun read(reader: ScaleCodecReader): Fail {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Fail): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 8
    }
  }

  /**
   * 'SetKeyValue' variant
   */
  public class SetKeyValue(
    private val setKeyValue: SetKeyValueBox
  ) : Instruction(), ScaleReader<SetKeyValue>, ScaleWriter<SetKeyValue> {
    public override fun read(reader: ScaleCodecReader): SetKeyValue {
    }

    public override fun write(writer: ScaleCodecWriter, instance: SetKeyValue): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 9
    }
  }

  /**
   * 'RemoveKeyValue' variant
   */
  public class RemoveKeyValue(
    private val removeKeyValue: RemoveKeyValueBox
  ) : Instruction(), ScaleReader<RemoveKeyValue>, ScaleWriter<RemoveKeyValue> {
    public override fun read(reader: ScaleCodecReader): RemoveKeyValue {
    }

    public override fun write(writer: ScaleCodecWriter, instance: RemoveKeyValue): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 10
    }
  }

  /**
   * 'Grant' variant
   */
  public class Grant(
    private val grant: GrantBox
  ) : Instruction(), ScaleReader<Grant>, ScaleWriter<Grant> {
    public override fun read(reader: ScaleCodecReader): Grant {
    }

    public override fun write(writer: ScaleCodecWriter, instance: Grant): Unit {
    }

    public companion object {
      public const val DISCRIMINANT: Int = 11
    }
  }
}
