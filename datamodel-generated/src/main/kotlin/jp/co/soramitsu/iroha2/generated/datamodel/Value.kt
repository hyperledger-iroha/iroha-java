// Do not change. Autogenerated code
package jp.co.soramitsu.iroha2.generated.datamodel

import kotlin.Boolean
import kotlin.Int
import kotlin.collections.List

/**
 * Value
 *
 * Matched to enum in Rust
 */
public abstract class Value {
  public companion object {
    public const val IROHA_FULL_NAME: kotlin.String = "iroha_data_model::Value"
  }

  /**
   * 'U32' variant
   */
  public class U32(
    private val u32: Int
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 0
    }
  }

  /**
   * 'Bool' variant
   */
  public class Bool(
    private val bool: Boolean
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 1
    }
  }

  /**
   * 'String' variant
   */
  public class String(
    private val string: kotlin.String
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 2
    }
  }

  /**
   * 'Vec' variant
   */
  public class Vec(
    private val vec: List<Value>
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 3
    }
  }

  /**
   * 'Id' variant
   */
  public class Id(
    private val id: IdBox
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 4
    }
  }

  /**
   * 'Identifiable' variant
   */
  public class Identifiable(
    private val identifiable: IdentifiableBox
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 5
    }
  }

  /**
   * 'PublicKey' variant
   */
  public class PublicKey(
    private val publicKey: jp.co.soramitsu.iroha2.generated.crypto.PublicKey
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 6
    }
  }

  /**
   * 'Parameter' variant
   */
  public class Parameter(
    private val parameter: jp.co.soramitsu.iroha2.generated.datamodel.Parameter
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 7
    }
  }

  /**
   * 'SignatureCheckCondition' variant
   */
  public class SignatureCheckCondition(
    private val signatureCheckCondition:
        jp.co.soramitsu.iroha2.generated.datamodel.account.SignatureCheckCondition
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 8
    }
  }

  /**
   * 'TransactionValue' variant
   */
  public class TransactionValue(
    private val transactionValue:
        jp.co.soramitsu.iroha2.generated.datamodel.transaction.TransactionValue
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 9
    }
  }

  /**
   * 'PermissionToken' variant
   */
  public class PermissionToken(
    private val permissionToken:
        jp.co.soramitsu.iroha2.generated.datamodel.permissions.PermissionToken
  ) : Value() {
    public companion object {
      public const val DISCRIMINANT: Int = 10
    }
  }
}
