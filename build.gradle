buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jmailen.gradle:kotlinter-gradle:$kotlinLinterVer"
    }
}

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVer"
    id 'org.jmailen.kotlinter' version "$kotlinLinterVer"
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'com.github.johnrengelman.shadow'

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                name = "iroha2-java-soramitsu"
                url = "https://nexus.iroha.tech/repository/maven-soramitsu/"
                credentials {
                    username = System.getenv("NEXUS_USER")
                    password = System.getenv("NEXUS_PASS")
                }
            }
        }
    }

    group = 'jp.co.soramitsu.iroha2-java'
    version = 'git rev-parse --short HEAD'.execute().text.trim()

    test {
        useJUnitPlatform()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }

        withJavadocJar()
        withSourcesJar()
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    kotlinter {
        ignoreFailures = false
        reporters = ['checkstyle', 'plain']
    }

    shadowJar {
        zip64 = true
        archiveFileName = "${archiveBaseName.get()}-${archiveVersion.get()}.jar"
    }

    // uncomment to produce shadowJar build by default
    // it is disabled by default to publish original version by CI, not a fat jar
    tasks.shadowJar.enabled = false
}

task allShadowJars {
    subprojects { pr -> allShadowJars.dependsOn("${pr.path}:shadowJar") }
}

check {
    dependsOn "installKotlinterPrePushHook"
}
